
temperature_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000012ba  0000134e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000b2  008000b2  000013a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002996  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6a  00000000  00000000  0000405a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001801  00000000  00000000  00004fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  000067c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ee  00000000  00000000  00006c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a8  00000000  00000000  00007576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000891e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_3>
      10:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 04 	call	0x8fa	; 0x8fa <main>
      8a:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include "Std_DIO_macros.h"

void ADC_init(void)
{
	/* configure AVCC as reference voltage with external capacitor on AREF pin  */
	SET_BIT(ADMUX,REFS0);
      92:	87 b1       	in	r24, 0x07	; 7
      94:	80 64       	ori	r24, 0x40	; 64
      96:	87 b9       	out	0x07, r24	; 7
	/* enable ADC */
	SET_BIT(ADCSRA,ADEN);
      98:	86 b1       	in	r24, 0x06	; 6
      9a:	80 68       	ori	r24, 0x80	; 128
      9c:	86 b9       	out	0x06, r24	; 6
	/* choose prescaler number to adjust ADC clock*/
	SET_BIT(ADCSRA,ADPS2);
      9e:	86 b1       	in	r24, 0x06	; 6
      a0:	84 60       	ori	r24, 0x04	; 4
      a2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
      a4:	86 b1       	in	r24, 0x06	; 6
      a6:	82 60       	ori	r24, 0x02	; 2
      a8:	86 b9       	out	0x06, r24	; 6
      aa:	08 95       	ret

000000ac <ADC_read>:

uint16_ ADC_read(void)
{
	uint16_ read_val;
	/* start ADC conversion, when finish it will be set to zero again */
	SET_BIT(ADCSRA,ADSC);
      ac:	86 b1       	in	r24, 0x06	; 6
      ae:	80 64       	ori	r24, 0x40	; 64
      b0:	86 b9       	out	0x06, r24	; 6
	/* wait for the ADC conversion to end  (polling) */
	while(IS_BIT_CLR(ADCSRA,ADIF));
      b2:	34 9b       	sbis	0x06, 4	; 6
      b4:	fe cf       	rjmp	.-4      	; 0xb2 <ADC_read+0x6>
	/* clear ADIF, flag interrupt to zero */
	SET_BIT(ADCSRA,ADIF);
      b6:	86 b1       	in	r24, 0x06	; 6
      b8:	80 61       	ori	r24, 0x10	; 16
      ba:	86 b9       	out	0x06, r24	; 6
	/* read digital value */
	read_val=(ADCL);
      bc:	24 b1       	in	r18, 0x04	; 4
	read_val|=(ADCH<<8);
      be:	85 b1       	in	r24, 0x05	; 5
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	98 2f       	mov	r25, r24
      c4:	88 27       	eor	r24, r24
	return read_val ;
}
      c6:	82 2b       	or	r24, r18
      c8:	08 95       	ret

000000ca <DIO_vsetPINDir>:
		case 'C':
		PORTC&=0xf0;
		PORTC|=value;
		case 'D':
		PORTD&=0xf0;
		PORTD|=value;
      ca:	82 34       	cpi	r24, 0x42	; 66
      cc:	19 f1       	breq	.+70     	; 0x114 <DIO_vsetPINDir+0x4a>
      ce:	18 f4       	brcc	.+6      	; 0xd6 <DIO_vsetPINDir+0xc>
      d0:	81 34       	cpi	r24, 0x41	; 65
      d2:	39 f0       	breq	.+14     	; 0xe2 <DIO_vsetPINDir+0x18>
      d4:	08 95       	ret
      d6:	83 34       	cpi	r24, 0x43	; 67
      d8:	b1 f1       	breq	.+108    	; 0x146 <DIO_vsetPINDir+0x7c>
      da:	84 34       	cpi	r24, 0x44	; 68
      dc:	09 f4       	brne	.+2      	; 0xe0 <DIO_vsetPINDir+0x16>
      de:	4c c0       	rjmp	.+152    	; 0x178 <DIO_vsetPINDir+0xae>
      e0:	08 95       	ret
      e2:	41 30       	cpi	r20, 0x01	; 1
      e4:	59 f4       	brne	.+22     	; 0xfc <DIO_vsetPINDir+0x32>
      e6:	2a b3       	in	r18, 0x1a	; 26
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_vsetPINDir+0x28>
      ee:	88 0f       	add	r24, r24
      f0:	99 1f       	adc	r25, r25
      f2:	6a 95       	dec	r22
      f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_vsetPINDir+0x24>
      f6:	82 2b       	or	r24, r18
      f8:	8a bb       	out	0x1a, r24	; 26
      fa:	08 95       	ret
      fc:	2a b3       	in	r18, 0x1a	; 26
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_vsetPINDir+0x3e>
     104:	88 0f       	add	r24, r24
     106:	99 1f       	adc	r25, r25
     108:	6a 95       	dec	r22
     10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_vsetPINDir+0x3a>
     10c:	80 95       	com	r24
     10e:	82 23       	and	r24, r18
     110:	8a bb       	out	0x1a, r24	; 26
     112:	08 95       	ret
     114:	41 30       	cpi	r20, 0x01	; 1
     116:	59 f4       	brne	.+22     	; 0x12e <DIO_vsetPINDir+0x64>
     118:	27 b3       	in	r18, 0x17	; 23
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_vsetPINDir+0x5a>
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	6a 95       	dec	r22
     126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_vsetPINDir+0x56>
     128:	82 2b       	or	r24, r18
     12a:	87 bb       	out	0x17, r24	; 23
     12c:	08 95       	ret
     12e:	27 b3       	in	r18, 0x17	; 23
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vsetPINDir+0x70>
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	6a 95       	dec	r22
     13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vsetPINDir+0x6c>
     13e:	80 95       	com	r24
     140:	82 23       	and	r24, r18
     142:	87 bb       	out	0x17, r24	; 23
     144:	08 95       	ret
     146:	41 30       	cpi	r20, 0x01	; 1
     148:	59 f4       	brne	.+22     	; 0x160 <DIO_vsetPINDir+0x96>
     14a:	24 b3       	in	r18, 0x14	; 20
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_vsetPINDir+0x8c>
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	6a 95       	dec	r22
     158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_vsetPINDir+0x88>
     15a:	82 2b       	or	r24, r18
     15c:	84 bb       	out	0x14, r24	; 20
     15e:	08 95       	ret
     160:	24 b3       	in	r18, 0x14	; 20
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetPINDir+0xa2>
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetPINDir+0x9e>
     170:	80 95       	com	r24
     172:	82 23       	and	r24, r18
     174:	84 bb       	out	0x14, r24	; 20
     176:	08 95       	ret
     178:	41 30       	cpi	r20, 0x01	; 1
     17a:	59 f4       	brne	.+22     	; 0x192 <DIO_vsetPINDir+0xc8>
     17c:	21 b3       	in	r18, 0x11	; 17
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_vsetPINDir+0xbe>
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	6a 95       	dec	r22
     18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_vsetPINDir+0xba>
     18c:	82 2b       	or	r24, r18
     18e:	81 bb       	out	0x11, r24	; 17
     190:	08 95       	ret
     192:	21 b3       	in	r18, 0x11	; 17
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vsetPINDir+0xd4>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vsetPINDir+0xd0>
     1a2:	80 95       	com	r24
     1a4:	82 23       	and	r24, r18
     1a6:	81 bb       	out	0x11, r24	; 17
     1a8:	08 95       	ret

000001aa <DIO_write>:
     1aa:	82 34       	cpi	r24, 0x42	; 66
     1ac:	19 f1       	breq	.+70     	; 0x1f4 <DIO_write+0x4a>
     1ae:	18 f4       	brcc	.+6      	; 0x1b6 <DIO_write+0xc>
     1b0:	81 34       	cpi	r24, 0x41	; 65
     1b2:	39 f0       	breq	.+14     	; 0x1c2 <DIO_write+0x18>
     1b4:	08 95       	ret
     1b6:	83 34       	cpi	r24, 0x43	; 67
     1b8:	b1 f1       	breq	.+108    	; 0x226 <DIO_write+0x7c>
     1ba:	84 34       	cpi	r24, 0x44	; 68
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <DIO_write+0x16>
     1be:	4c c0       	rjmp	.+152    	; 0x258 <DIO_write+0xae>
     1c0:	08 95       	ret
     1c2:	41 30       	cpi	r20, 0x01	; 1
     1c4:	59 f4       	brne	.+22     	; 0x1dc <DIO_write+0x32>
     1c6:	2b b3       	in	r18, 0x1b	; 27
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_write+0x28>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	6a 95       	dec	r22
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_write+0x24>
     1d6:	82 2b       	or	r24, r18
     1d8:	8b bb       	out	0x1b, r24	; 27
     1da:	08 95       	ret
     1dc:	2b b3       	in	r18, 0x1b	; 27
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_write+0x3e>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	6a 95       	dec	r22
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_write+0x3a>
     1ec:	80 95       	com	r24
     1ee:	82 23       	and	r24, r18
     1f0:	8b bb       	out	0x1b, r24	; 27
     1f2:	08 95       	ret
     1f4:	41 30       	cpi	r20, 0x01	; 1
     1f6:	59 f4       	brne	.+22     	; 0x20e <DIO_write+0x64>
     1f8:	28 b3       	in	r18, 0x18	; 24
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_write+0x5a>
     200:	88 0f       	add	r24, r24
     202:	99 1f       	adc	r25, r25
     204:	6a 95       	dec	r22
     206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_write+0x56>
     208:	82 2b       	or	r24, r18
     20a:	88 bb       	out	0x18, r24	; 24
     20c:	08 95       	ret
     20e:	28 b3       	in	r18, 0x18	; 24
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_write+0x70>
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_write+0x6c>
     21e:	80 95       	com	r24
     220:	82 23       	and	r24, r18
     222:	88 bb       	out	0x18, r24	; 24
     224:	08 95       	ret
     226:	41 30       	cpi	r20, 0x01	; 1
     228:	59 f4       	brne	.+22     	; 0x240 <DIO_write+0x96>
     22a:	25 b3       	in	r18, 0x15	; 21
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_write+0x8c>
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	6a 95       	dec	r22
     238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_write+0x88>
     23a:	82 2b       	or	r24, r18
     23c:	85 bb       	out	0x15, r24	; 21
     23e:	08 95       	ret
     240:	25 b3       	in	r18, 0x15	; 21
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_write+0xa2>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	6a 95       	dec	r22
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_write+0x9e>
     250:	80 95       	com	r24
     252:	82 23       	and	r24, r18
     254:	85 bb       	out	0x15, r24	; 21
     256:	08 95       	ret
     258:	41 30       	cpi	r20, 0x01	; 1
     25a:	59 f4       	brne	.+22     	; 0x272 <DIO_write+0xc8>
     25c:	22 b3       	in	r18, 0x12	; 18
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_write+0xbe>
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	6a 95       	dec	r22
     26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_write+0xba>
     26c:	82 2b       	or	r24, r18
     26e:	82 bb       	out	0x12, r24	; 18
     270:	08 95       	ret
     272:	22 b3       	in	r18, 0x12	; 18
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_write+0xd4>
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_write+0xd0>
     282:	80 95       	com	r24
     284:	82 23       	and	r24, r18
     286:	82 bb       	out	0x12, r24	; 18
     288:	08 95       	ret

0000028a <DIO_u8read>:
     28a:	82 34       	cpi	r24, 0x42	; 66
     28c:	e9 f0       	breq	.+58     	; 0x2c8 <DIO_u8read+0x3e>
     28e:	18 f4       	brcc	.+6      	; 0x296 <DIO_u8read+0xc>
     290:	81 34       	cpi	r24, 0x41	; 65
     292:	31 f0       	breq	.+12     	; 0x2a0 <DIO_u8read+0x16>
     294:	55 c0       	rjmp	.+170    	; 0x340 <DIO_u8read+0xb6>
     296:	83 34       	cpi	r24, 0x43	; 67
     298:	59 f1       	breq	.+86     	; 0x2f0 <DIO_u8read+0x66>
     29a:	84 34       	cpi	r24, 0x44	; 68
     29c:	e9 f1       	breq	.+122    	; 0x318 <DIO_u8read+0x8e>
     29e:	50 c0       	rjmp	.+160    	; 0x340 <DIO_u8read+0xb6>
     2a0:	49 b3       	in	r20, 0x19	; 25
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	9c 01       	movw	r18, r24
     2a8:	06 2e       	mov	r0, r22
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_u8read+0x26>
     2ac:	22 0f       	add	r18, r18
     2ae:	33 1f       	adc	r19, r19
     2b0:	0a 94       	dec	r0
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_u8read+0x22>
     2b4:	84 2f       	mov	r24, r20
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	82 23       	and	r24, r18
     2ba:	93 23       	and	r25, r19
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_u8read+0x38>
     2be:	95 95       	asr	r25
     2c0:	87 95       	ror	r24
     2c2:	6a 95       	dec	r22
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_u8read+0x34>
     2c6:	08 95       	ret
     2c8:	46 b3       	in	r20, 0x16	; 22
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	9c 01       	movw	r18, r24
     2d0:	06 2e       	mov	r0, r22
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8read+0x4e>
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	0a 94       	dec	r0
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8read+0x4a>
     2dc:	84 2f       	mov	r24, r20
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	82 23       	and	r24, r18
     2e2:	93 23       	and	r25, r19
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_u8read+0x60>
     2e6:	95 95       	asr	r25
     2e8:	87 95       	ror	r24
     2ea:	6a 95       	dec	r22
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_u8read+0x5c>
     2ee:	08 95       	ret
     2f0:	43 b3       	in	r20, 0x13	; 19
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	9c 01       	movw	r18, r24
     2f8:	06 2e       	mov	r0, r22
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_u8read+0x76>
     2fc:	22 0f       	add	r18, r18
     2fe:	33 1f       	adc	r19, r19
     300:	0a 94       	dec	r0
     302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_u8read+0x72>
     304:	84 2f       	mov	r24, r20
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	82 23       	and	r24, r18
     30a:	93 23       	and	r25, r19
     30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_u8read+0x88>
     30e:	95 95       	asr	r25
     310:	87 95       	ror	r24
     312:	6a 95       	dec	r22
     314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_u8read+0x84>
     316:	08 95       	ret
     318:	40 b3       	in	r20, 0x10	; 16
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	9c 01       	movw	r18, r24
     320:	06 2e       	mov	r0, r22
     322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8read+0x9e>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8read+0x9a>
     32c:	84 2f       	mov	r24, r20
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	82 23       	and	r24, r18
     332:	93 23       	and	r25, r19
     334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_u8read+0xb0>
     336:	95 95       	asr	r25
     338:	87 95       	ror	r24
     33a:	6a 95       	dec	r22
     33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_u8read+0xac>
     33e:	08 95       	ret
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	08 95       	ret

00000344 <DIO_vconnectpullup>:
     344:	82 34       	cpi	r24, 0x42	; 66
     346:	19 f1       	breq	.+70     	; 0x38e <DIO_vconnectpullup+0x4a>
     348:	1c f4       	brge	.+6      	; 0x350 <DIO_vconnectpullup+0xc>
     34a:	81 34       	cpi	r24, 0x41	; 65
     34c:	39 f0       	breq	.+14     	; 0x35c <DIO_vconnectpullup+0x18>
     34e:	08 95       	ret
     350:	83 34       	cpi	r24, 0x43	; 67
     352:	b1 f1       	breq	.+108    	; 0x3c0 <DIO_vconnectpullup+0x7c>
     354:	84 34       	cpi	r24, 0x44	; 68
     356:	09 f4       	brne	.+2      	; 0x35a <DIO_vconnectpullup+0x16>
     358:	4c c0       	rjmp	.+152    	; 0x3f2 <DIO_vconnectpullup+0xae>
     35a:	08 95       	ret
     35c:	41 30       	cpi	r20, 0x01	; 1
     35e:	59 f4       	brne	.+22     	; 0x376 <DIO_vconnectpullup+0x32>
     360:	2b b3       	in	r18, 0x1b	; 27
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_vconnectpullup+0x28>
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	6a 95       	dec	r22
     36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_vconnectpullup+0x24>
     370:	82 2b       	or	r24, r18
     372:	8b bb       	out	0x1b, r24	; 27
     374:	08 95       	ret
     376:	2b b3       	in	r18, 0x1b	; 27
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_vconnectpullup+0x3e>
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	6a 95       	dec	r22
     384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_vconnectpullup+0x3a>
     386:	80 95       	com	r24
     388:	82 23       	and	r24, r18
     38a:	8b bb       	out	0x1b, r24	; 27
     38c:	08 95       	ret
     38e:	41 30       	cpi	r20, 0x01	; 1
     390:	59 f4       	brne	.+22     	; 0x3a8 <DIO_vconnectpullup+0x64>
     392:	28 b3       	in	r18, 0x18	; 24
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_vconnectpullup+0x5a>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_vconnectpullup+0x56>
     3a2:	82 2b       	or	r24, r18
     3a4:	88 bb       	out	0x18, r24	; 24
     3a6:	08 95       	ret
     3a8:	28 b3       	in	r18, 0x18	; 24
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_vconnectpullup+0x70>
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	6a 95       	dec	r22
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_vconnectpullup+0x6c>
     3b8:	80 95       	com	r24
     3ba:	82 23       	and	r24, r18
     3bc:	88 bb       	out	0x18, r24	; 24
     3be:	08 95       	ret
     3c0:	41 30       	cpi	r20, 0x01	; 1
     3c2:	59 f4       	brne	.+22     	; 0x3da <DIO_vconnectpullup+0x96>
     3c4:	25 b3       	in	r18, 0x15	; 21
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_vconnectpullup+0x8c>
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	6a 95       	dec	r22
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_vconnectpullup+0x88>
     3d4:	82 2b       	or	r24, r18
     3d6:	85 bb       	out	0x15, r24	; 21
     3d8:	08 95       	ret
     3da:	25 b3       	in	r18, 0x15	; 21
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_vconnectpullup+0xa2>
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_vconnectpullup+0x9e>
     3ea:	80 95       	com	r24
     3ec:	82 23       	and	r24, r18
     3ee:	85 bb       	out	0x15, r24	; 21
     3f0:	08 95       	ret
     3f2:	41 30       	cpi	r20, 0x01	; 1
     3f4:	59 f4       	brne	.+22     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3f6:	22 b3       	in	r18, 0x12	; 18
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	6a 95       	dec	r22
     404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_vconnectpullup+0xba>
     406:	82 2b       	or	r24, r18
     408:	82 bb       	out	0x12, r24	; 18
     40a:	08 95       	ret
     40c:	22 b3       	in	r18, 0x12	; 18
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	6a 95       	dec	r22
     41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     41c:	80 95       	com	r24
     41e:	82 23       	and	r24, r18
     420:	82 bb       	out	0x12, r24	; 18
     422:	08 95       	ret

00000424 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
     424:	62 95       	swap	r22
     426:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
     428:	82 34       	cpi	r24, 0x42	; 66
     42a:	79 f0       	breq	.+30     	; 0x44a <write_high_nibble+0x26>
     42c:	18 f4       	brcc	.+6      	; 0x434 <write_high_nibble+0x10>
     42e:	81 34       	cpi	r24, 0x41	; 65
     430:	31 f0       	breq	.+12     	; 0x43e <write_high_nibble+0x1a>
     432:	08 95       	ret
     434:	83 34       	cpi	r24, 0x43	; 67
     436:	79 f0       	breq	.+30     	; 0x456 <write_high_nibble+0x32>
     438:	84 34       	cpi	r24, 0x44	; 68
     43a:	99 f0       	breq	.+38     	; 0x462 <write_high_nibble+0x3e>
     43c:	08 95       	ret
	{
		case 'A':
		PORTA&=0x0f;
     43e:	8b b3       	in	r24, 0x1b	; 27
     440:	8f 70       	andi	r24, 0x0F	; 15
     442:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     444:	8b b3       	in	r24, 0x1b	; 27
     446:	86 2b       	or	r24, r22
     448:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     44a:	88 b3       	in	r24, 0x18	; 24
     44c:	8f 70       	andi	r24, 0x0F	; 15
     44e:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     450:	88 b3       	in	r24, 0x18	; 24
     452:	86 2b       	or	r24, r22
     454:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     456:	85 b3       	in	r24, 0x15	; 21
     458:	8f 70       	andi	r24, 0x0F	; 15
     45a:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     45c:	85 b3       	in	r24, 0x15	; 21
     45e:	86 2b       	or	r24, r22
     460:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     462:	82 b3       	in	r24, 0x12	; 18
     464:	8f 70       	andi	r24, 0x0F	; 15
     466:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     468:	82 b3       	in	r24, 0x12	; 18
     46a:	68 2b       	or	r22, r24
     46c:	62 bb       	out	0x12, r22	; 18
     46e:	08 95       	ret

00000470 <external_intrrupt2>:
#include "Std_DIO_macros.h"
#include "Timer.h"

void external_intrrupt2(void)
{
	sei();
     470:	78 94       	sei
	CLR_BIT(DDRB,2);
     472:	87 b3       	in	r24, 0x17	; 23
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(MCUCSR,ISC2);
     478:	84 b7       	in	r24, 0x34	; 52
     47a:	8f 7b       	andi	r24, 0xBF	; 191
     47c:	84 bf       	out	0x34, r24	; 52
	SET_BIT(GICR,INT2);
     47e:	8b b7       	in	r24, 0x3b	; 59
     480:	80 62       	ori	r24, 0x20	; 32
     482:	8b bf       	out	0x3b, r24	; 59
     484:	08 95       	ret

00000486 <interrupt_1ms>:
	
}
void interrupt_1ms(void)
{
	 timer2_CTC_init_interrupt_1ms();
     486:	0e 94 16 07 	call	0xe2c	; 0xe2c <timer2_CTC_init_interrupt_1ms>
     48a:	08 95       	ret

0000048c <diable_interrupts>:
}
void diable_interrupts(void)
{
	cli();
     48c:	f8 94       	cli
	CLR_BIT(GICR,INT2);
     48e:	8b b7       	in	r24, 0x3b	; 59
     490:	8f 7d       	andi	r24, 0xDF	; 223
     492:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(ADCSRA,ADEN);
     494:	86 b1       	in	r24, 0x06	; 6
     496:	8f 77       	andi	r24, 0x7F	; 127
     498:	86 b9       	out	0x06, r24	; 6
	
	stop_timer();
     49a:	0e 94 4b 07 	call	0xe96	; 0xe96 <stop_timer>
     49e:	08 95       	ret

000004a0 <keypad_vInit>:
 #include "avr/delay.h"

 
 void keypad_vInit(void)
 {
	 DIO_vsetPINDir('C',0,0);
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	83 e4       	ldi	r24, 0x43	; 67
     4a6:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',1,0);
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	83 e4       	ldi	r24, 0x43	; 67
     4b0:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',2,0);
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	62 e0       	ldi	r22, 0x02	; 2
     4b8:	83 e4       	ldi	r24, 0x43	; 67
     4ba:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',3,0);
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	63 e0       	ldi	r22, 0x03	; 3
     4c2:	83 e4       	ldi	r24, 0x43	; 67
     4c4:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',4,0);
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	64 e0       	ldi	r22, 0x04	; 4
     4cc:	83 e4       	ldi	r24, 0x43	; 67
     4ce:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',5,0);
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	65 e0       	ldi	r22, 0x05	; 5
     4d6:	83 e4       	ldi	r24, 0x43	; 67
     4d8:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',6,0);
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	66 e0       	ldi	r22, 0x06	; 6
     4e0:	83 e4       	ldi	r24, 0x43	; 67
     4e2:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',7,0);
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	67 e0       	ldi	r22, 0x07	; 7
     4ea:	83 e4       	ldi	r24, 0x43	; 67
     4ec:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',0,0);
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	84 e4       	ldi	r24, 0x44	; 68
     4f6:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,0);
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	84 e4       	ldi	r24, 0x44	; 68
     500:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,0);
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	62 e0       	ldi	r22, 0x02	; 2
     508:	84 e4       	ldi	r24, 0x44	; 68
     50a:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,0);
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	63 e0       	ldi	r22, 0x03	; 3
     512:	84 e4       	ldi	r24, 0x44	; 68
     514:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	 DIO_vconnectpullup('C',(uint8_)0,(uint8_)1);
     518:	41 e0       	ldi	r20, 0x01	; 1
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	83 e4       	ldi	r24, 0x43	; 67
     51e:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('C',(uint8_)1,(uint8_)1);
     522:	41 e0       	ldi	r20, 0x01	; 1
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	83 e4       	ldi	r24, 0x43	; 67
     528:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('C',(uint8_)2,(uint8_)1);
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	62 e0       	ldi	r22, 0x02	; 2
     530:	83 e4       	ldi	r24, 0x43	; 67
     532:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('C',(uint8_)3,(uint8_)1);
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	63 e0       	ldi	r22, 0x03	; 3
     53a:	83 e4       	ldi	r24, 0x43	; 67
     53c:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('C',(uint8_)4,(uint8_)1);
     540:	41 e0       	ldi	r20, 0x01	; 1
     542:	64 e0       	ldi	r22, 0x04	; 4
     544:	83 e4       	ldi	r24, 0x43	; 67
     546:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('C',(uint8_)5,(uint8_)1);
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	65 e0       	ldi	r22, 0x05	; 5
     54e:	83 e4       	ldi	r24, 0x43	; 67
     550:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('C',(uint8_)6,(uint8_)1);
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	66 e0       	ldi	r22, 0x06	; 6
     558:	83 e4       	ldi	r24, 0x43	; 67
     55a:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('C',(uint8_)7,(uint8_)1);
     55e:	41 e0       	ldi	r20, 0x01	; 1
     560:	67 e0       	ldi	r22, 0x07	; 7
     562:	83 e4       	ldi	r24, 0x43	; 67
     564:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',(uint8_)0,(uint8_)1);
     568:	41 e0       	ldi	r20, 0x01	; 1
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	84 e4       	ldi	r24, 0x44	; 68
     56e:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',(uint8_)1,(uint8_)1);
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	61 e0       	ldi	r22, 0x01	; 1
     576:	84 e4       	ldi	r24, 0x44	; 68
     578:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',(uint8_)2,(uint8_)1);
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	62 e0       	ldi	r22, 0x02	; 2
     580:	84 e4       	ldi	r24, 0x44	; 68
     582:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',(uint8_)3,(uint8_)1); 
     586:	41 e0       	ldi	r20, 0x01	; 1
     588:	63 e0       	ldi	r22, 0x03	; 3
     58a:	84 e4       	ldi	r24, 0x44	; 68
     58c:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_vconnectpullup>
     590:	08 95       	ret

00000592 <keypad_u8check_press>:
 }
 
 
 
 char keypad_u8check_press(void)
 {
     592:	cf 93       	push	r28
	 char arr[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	uint8_ row,coloumn,pin0_reading,pin1_reading,pin2_reading,pin3_reading,pin4_reading,pin5_reading,pin6_reading,pin7_reading,
	 pin0_reading2,pin1_reading2,pin2_reading2,pin3_reading2;
	 uint8_ returnval=200;
	 
	 DIO_write('C',0,1);
     594:	41 e0       	ldi	r20, 0x01	; 1
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	83 e4       	ldi	r24, 0x43	; 67
     59a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('C',1,1);
     59e:	41 e0       	ldi	r20, 0x01	; 1
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	83 e4       	ldi	r24, 0x43	; 67
     5a4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('C',2,1);
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	62 e0       	ldi	r22, 0x02	; 2
     5ac:	83 e4       	ldi	r24, 0x43	; 67
     5ae:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('C',3,1);
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	63 e0       	ldi	r22, 0x03	; 3
     5b6:	83 e4       	ldi	r24, 0x43	; 67
     5b8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('C',4,1);
     5bc:	41 e0       	ldi	r20, 0x01	; 1
     5be:	64 e0       	ldi	r22, 0x04	; 4
     5c0:	83 e4       	ldi	r24, 0x43	; 67
     5c2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('C',5,1);
     5c6:	41 e0       	ldi	r20, 0x01	; 1
     5c8:	65 e0       	ldi	r22, 0x05	; 5
     5ca:	83 e4       	ldi	r24, 0x43	; 67
     5cc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('C',6,1);
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	66 e0       	ldi	r22, 0x06	; 6
     5d4:	83 e4       	ldi	r24, 0x43	; 67
     5d6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('C',7,1);
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	67 e0       	ldi	r22, 0x07	; 7
     5de:	83 e4       	ldi	r24, 0x43	; 67
     5e0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('D',0,1);
     5e4:	41 e0       	ldi	r20, 0x01	; 1
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	84 e4       	ldi	r24, 0x44	; 68
     5ea:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('D',1,1);
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	84 e4       	ldi	r24, 0x44	; 68
     5f4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('D',2,1);
     5f8:	41 e0       	ldi	r20, 0x01	; 1
     5fa:	62 e0       	ldi	r22, 0x02	; 2
     5fc:	84 e4       	ldi	r24, 0x44	; 68
     5fe:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 DIO_write('D',3,1);
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	63 e0       	ldi	r22, 0x03	; 3
     606:	84 e4       	ldi	r24, 0x44	; 68
     608:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	 
	 pin0_reading=DIO_u8read('C',0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	83 e4       	ldi	r24, 0x43	; 67
     610:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
		 if((uint8_)pin0_reading==0)
     614:	88 23       	and	r24, r24
     616:	11 f0       	breq	.+4      	; 0x61c <keypad_u8check_press+0x8a>
 char keypad_u8check_press(void)
 {
	 char arr[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	uint8_ row,coloumn,pin0_reading,pin1_reading,pin2_reading,pin3_reading,pin4_reading,pin5_reading,pin6_reading,pin7_reading,
	 pin0_reading2,pin1_reading2,pin2_reading2,pin3_reading2;
	 uint8_ returnval=200;
     618:	c8 ec       	ldi	r28, 0xC8	; 200
     61a:	01 c0       	rjmp	.+2      	; 0x61e <keypad_u8check_press+0x8c>
	 DIO_write('D',3,1);
	 
	 pin0_reading=DIO_u8read('C',0);
		 if((uint8_)pin0_reading==0)
			 {
			  returnval=arr[0][0];
     61c:	c1 e3       	ldi	r28, 0x31	; 49
			 
			 }  
	pin1_reading=DIO_u8read('C',1);
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	83 e4       	ldi	r24, 0x43	; 67
     622:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
	 if((uint8_)pin1_reading==0)
     626:	81 11       	cpse	r24, r1
     628:	01 c0       	rjmp	.+2      	; 0x62c <keypad_u8check_press+0x9a>
	 {
		 returnval=arr[0][1];
     62a:	c2 e3       	ldi	r28, 0x32	; 50
		 
	 }
	 pin2_reading=DIO_u8read('C',2);
     62c:	62 e0       	ldi	r22, 0x02	; 2
     62e:	83 e4       	ldi	r24, 0x43	; 67
     630:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
	 if((uint8_)pin2_reading==0)
     634:	81 11       	cpse	r24, r1
     636:	01 c0       	rjmp	.+2      	; 0x63a <keypad_u8check_press+0xa8>
	 {
		 returnval=arr[0][2];
     638:	c3 e3       	ldi	r28, 0x33	; 51
		 
	 }
	 
	 
	  pin3_reading=DIO_u8read('C',3);
     63a:	63 e0       	ldi	r22, 0x03	; 3
     63c:	83 e4       	ldi	r24, 0x43	; 67
     63e:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
	  if((uint8_)pin3_reading==0)
     642:	81 11       	cpse	r24, r1
     644:	01 c0       	rjmp	.+2      	; 0x648 <keypad_u8check_press+0xb6>
	  {
		  returnval=arr[1][0];
     646:	c4 e3       	ldi	r28, 0x34	; 52
		  
	  }
	   pin4_reading=DIO_u8read('C',4);
     648:	64 e0       	ldi	r22, 0x04	; 4
     64a:	83 e4       	ldi	r24, 0x43	; 67
     64c:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
	   if((uint8_)pin4_reading==0)
     650:	81 11       	cpse	r24, r1
     652:	01 c0       	rjmp	.+2      	; 0x656 <keypad_u8check_press+0xc4>
	   {
		   returnval=arr[1][1];
     654:	c5 e3       	ldi	r28, 0x35	; 53
		   
	   }
	    pin5_reading=DIO_u8read('C',5);
     656:	65 e0       	ldi	r22, 0x05	; 5
     658:	83 e4       	ldi	r24, 0x43	; 67
     65a:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
	    if((uint8_)pin5_reading==0)
     65e:	81 11       	cpse	r24, r1
     660:	01 c0       	rjmp	.+2      	; 0x664 <keypad_u8check_press+0xd2>
	    {
		    returnval=arr[1][2];
     662:	c6 e3       	ldi	r28, 0x36	; 54
		    
	    }
		 pin6_reading=DIO_u8read('C',6);
     664:	66 e0       	ldi	r22, 0x06	; 6
     666:	83 e4       	ldi	r24, 0x43	; 67
     668:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
		 if((uint8_)pin6_reading==0)
     66c:	81 11       	cpse	r24, r1
     66e:	01 c0       	rjmp	.+2      	; 0x672 <keypad_u8check_press+0xe0>
		 {
			 returnval=arr[2][0];
     670:	c7 e3       	ldi	r28, 0x37	; 55
			 
		 }
		  pin7_reading=DIO_u8read('C',7);
     672:	67 e0       	ldi	r22, 0x07	; 7
     674:	83 e4       	ldi	r24, 0x43	; 67
     676:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
		  if((uint8_)pin7_reading==0)
     67a:	81 11       	cpse	r24, r1
     67c:	01 c0       	rjmp	.+2      	; 0x680 <keypad_u8check_press+0xee>
		  {
			  returnval=arr[2][1];
     67e:	c8 e3       	ldi	r28, 0x38	; 56
			  
		  }
	 
	   pin0_reading2=DIO_u8read('D',0);
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	84 e4       	ldi	r24, 0x44	; 68
     684:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
	   if((uint8_)pin0_reading2==0)
     688:	81 11       	cpse	r24, r1
     68a:	01 c0       	rjmp	.+2      	; 0x68e <keypad_u8check_press+0xfc>
	   {
		   returnval=arr[2][2];
     68c:	c9 e3       	ldi	r28, 0x39	; 57
		   
	   }
	   
	   pin1_reading2=DIO_u8read('D',1);
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	84 e4       	ldi	r24, 0x44	; 68
     692:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
	   if((uint8_)pin1_reading2==0)
     696:	81 11       	cpse	r24, r1
     698:	01 c0       	rjmp	.+2      	; 0x69c <keypad_u8check_press+0x10a>
	   {
		   returnval=arr[3][0];
     69a:	ca e2       	ldi	r28, 0x2A	; 42
		   
	   }
	   
	   
	   pin2_reading2=DIO_u8read('D',2);
     69c:	62 e0       	ldi	r22, 0x02	; 2
     69e:	84 e4       	ldi	r24, 0x44	; 68
     6a0:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
	   if((uint8_)pin2_reading2==0)
     6a4:	81 11       	cpse	r24, r1
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <keypad_u8check_press+0x118>
	   {
		   returnval=arr[3][1];
     6a8:	c0 e3       	ldi	r28, 0x30	; 48
		   
	   }
	   
	   
	   pin3_reading2=DIO_u8read('D',3);
     6aa:	63 e0       	ldi	r22, 0x03	; 3
     6ac:	84 e4       	ldi	r24, 0x44	; 68
     6ae:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_u8read>
	   if((uint8_)pin3_reading2==0)
     6b2:	81 11       	cpse	r24, r1
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <keypad_u8check_press+0x126>
	   {
		   returnval=arr[3][2]; 
     6b6:	c3 e2       	ldi	r28, 0x23	; 35
	   }
	    
	 return returnval ;	 
 }
     6b8:	8c 2f       	mov	r24, r28
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <input_keypad>:
	 DIO_vconnectpullup('D',(uint8_)2,(uint8_)1);
	 DIO_vconnectpullup('D',(uint8_)3,(uint8_)1); 
 }
 
 uint8_ input_keypad(void)
 {
     6be:	cf 93       	push	r28
	 uint8_ left_digit=0;
	 uint8_ KeyPadVal=0;
	 do
	 {
		 KeyPadVal=keypad_u8check_press();
     6c0:	0e 94 c9 02 	call	0x592	; 0x592 <keypad_u8check_press>
	 } while ( (KeyPadVal==200) || (KeyPadVal =='*') || (KeyPadVal =='#') );
     6c4:	88 3c       	cpi	r24, 0xC8	; 200
     6c6:	e1 f3       	breq	.-8      	; 0x6c0 <input_keypad+0x2>
     6c8:	8a 32       	cpi	r24, 0x2A	; 42
     6ca:	d1 f3       	breq	.-12     	; 0x6c0 <input_keypad+0x2>
     6cc:	83 32       	cpi	r24, 0x23	; 35
     6ce:	c1 f3       	breq	.-16     	; 0x6c0 <input_keypad+0x2>

	 left_digit=(uint8_)KeyPadVal;
	 left_digit*=(uint8_)10;
     6d0:	88 0f       	add	r24, r24
     6d2:	c8 2f       	mov	r28, r24
     6d4:	cc 0f       	add	r28, r28
     6d6:	cc 0f       	add	r28, r28
     6d8:	c8 0f       	add	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6da:	2f ef       	ldi	r18, 0xFF	; 255
     6dc:	82 e5       	ldi	r24, 0x52	; 82
     6de:	97 e0       	ldi	r25, 0x07	; 7
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	80 40       	sbci	r24, 0x00	; 0
     6e4:	90 40       	sbci	r25, 0x00	; 0
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <input_keypad+0x22>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <input_keypad+0x2c>
     6ea:	00 00       	nop
	 _delay_ms(300);
	 do
	 {
		 KeyPadVal=keypad_u8check_press();
     6ec:	0e 94 c9 02 	call	0x592	; 0x592 <keypad_u8check_press>
	 } while ( (KeyPadVal==200) || (KeyPadVal =='*') || (KeyPadVal =='#') );
     6f0:	88 3c       	cpi	r24, 0xC8	; 200
     6f2:	e1 f3       	breq	.-8      	; 0x6ec <input_keypad+0x2e>
     6f4:	8a 32       	cpi	r24, 0x2A	; 42
     6f6:	d1 f3       	breq	.-12     	; 0x6ec <input_keypad+0x2e>
     6f8:	83 32       	cpi	r24, 0x23	; 35
     6fa:	c1 f3       	breq	.-16     	; 0x6ec <input_keypad+0x2e>

	 left_digit+=(uint8_)KeyPadVal;
     6fc:	8c 0f       	add	r24, r28

	 
	 return (uint8_)(left_digit-16);
 }
     6fe:	80 51       	subi	r24, 0x10	; 16
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('A',EN,1);
     704:	41 e0       	ldi	r20, 0x01	; 1
     706:	63 e0       	ldi	r22, 0x03	; 3
     708:	81 e4       	ldi	r24, 0x41	; 65
     70a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
     70e:	8f e9       	ldi	r24, 0x9F	; 159
     710:	9f e0       	ldi	r25, 0x0F	; 15
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <send_falling_edge+0xe>
     716:	00 c0       	rjmp	.+0      	; 0x718 <send_falling_edge+0x14>
     718:	00 00       	nop
	_delay_ms(2);
	DIO_write('A',EN,0);
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	63 e0       	ldi	r22, 0x03	; 3
     71e:	81 e4       	ldi	r24, 0x41	; 65
     720:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
     724:	8f e9       	ldi	r24, 0x9F	; 159
     726:	9f e0       	ldi	r25, 0x0F	; 15
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <send_falling_edge+0x24>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <send_falling_edge+0x2a>
     72e:	00 00       	nop
     730:	08 95       	ret

00000732 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
     732:	cf 93       	push	r28
     734:	c8 2f       	mov	r28, r24
	
	
	
	write_high_nibble('A',cmd>>4);
     736:	68 2f       	mov	r22, r24
     738:	62 95       	swap	r22
     73a:	6f 70       	andi	r22, 0x0F	; 15
     73c:	81 e4       	ldi	r24, 0x41	; 65
     73e:	0e 94 12 02 	call	0x424	; 0x424 <write_high_nibble>
	DIO_write('A',RS,0);
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	81 e4       	ldi	r24, 0x41	; 65
     748:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	send_falling_edge();
     74c:	0e 94 82 03 	call	0x704	; 0x704 <send_falling_edge>
	write_high_nibble('A',cmd);
     750:	6c 2f       	mov	r22, r28
     752:	81 e4       	ldi	r24, 0x41	; 65
     754:	0e 94 12 02 	call	0x424	; 0x424 <write_high_nibble>
	DIO_write('A',RS,0);
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	81 e4       	ldi	r24, 0x41	; 65
     75e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	send_falling_edge();
     762:	0e 94 82 03 	call	0x704	; 0x704 <send_falling_edge>
     766:	8f ec       	ldi	r24, 0xCF	; 207
     768:	97 e0       	ldi	r25, 0x07	; 7
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <LCD_vSend_cmd+0x38>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <LCD_vSend_cmd+0x3e>
     770:	00 00       	nop
	
	_delay_ms(1);
}
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <LCD_vInit>:
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	81 ee       	ldi	r24, 0xE1	; 225
     77a:	94 e0       	ldi	r25, 0x04	; 4
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <LCD_vInit+0x6>
     784:	00 c0       	rjmp	.+0      	; 0x786 <LCD_vInit+0x10>
     786:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	
	DIO_vsetPINDir('A',4,1);
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	64 e0       	ldi	r22, 0x04	; 4
     78c:	81 e4       	ldi	r24, 0x41	; 65
     78e:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	65 e0       	ldi	r22, 0x05	; 5
     796:	81 e4       	ldi	r24, 0x41	; 65
     798:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	66 e0       	ldi	r22, 0x06	; 6
     7a0:	81 e4       	ldi	r24, 0x41	; 65
     7a2:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	67 e0       	ldi	r22, 0x07	; 7
     7aa:	81 e4       	ldi	r24, 0x41	; 65
     7ac:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	DIO_vsetPINDir('A',EN,1);
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	63 e0       	ldi	r22, 0x03	; 3
     7b4:	81 e4       	ldi	r24, 0x41	; 65
     7b6:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RW,1);
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	62 e0       	ldi	r22, 0x02	; 2
     7be:	81 e4       	ldi	r24, 0x41	; 65
     7c0:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RS,1);
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	81 e4       	ldi	r24, 0x41	; 65
     7ca:	0e 94 65 00 	call	0xca	; 0xca <DIO_vsetPINDir>
   	DIO_write('A',RW,0);
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	62 e0       	ldi	r22, 0x02	; 2
     7d2:	81 e4       	ldi	r24, 0x41	; 65
     7d4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); /*return home*/
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	0e 94 99 03 	call	0x732	; 0x732 <LCD_vSend_cmd>
     7de:	8f e1       	ldi	r24, 0x1F	; 31
     7e0:	9e e4       	ldi	r25, 0x4E	; 78
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <LCD_vInit+0x6c>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <LCD_vInit+0x72>
     7e8:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); /* 4bit mode*/
     7ea:	88 e2       	ldi	r24, 0x28	; 40
     7ec:	0e 94 99 03 	call	0x732	; 0x732 <LCD_vSend_cmd>
     7f0:	8f ec       	ldi	r24, 0xCF	; 207
     7f2:	97 e0       	ldi	r25, 0x07	; 7
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <LCD_vInit+0x7e>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <LCD_vInit+0x84>
     7fa:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_OFF_DISPLAN_ON);/* display on cursor on */
     7fc:	8c e0       	ldi	r24, 0x0C	; 12
     7fe:	0e 94 99 03 	call	0x732	; 0x732 <LCD_vSend_cmd>
     802:	8f ec       	ldi	r24, 0xCF	; 207
     804:	97 e0       	ldi	r25, 0x07	; 7
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);/* clear the screen  */
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 99 03 	call	0x732	; 0x732 <LCD_vSend_cmd>
     814:	8f e1       	ldi	r24, 0x1F	; 31
     816:	9e e4       	ldi	r25, 0x4E	; 78
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81e:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); /* entry mode  */
     820:	86 e0       	ldi	r24, 0x06	; 6
     822:	0e 94 99 03 	call	0x732	; 0x732 <LCD_vSend_cmd>
     826:	8f ec       	ldi	r24, 0xCF	; 207
     828:	97 e0       	ldi	r25, 0x07	; 7
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     830:	00 00       	nop
     832:	08 95       	ret

00000834 <LCD_vSend_char>:
	
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
     834:	cf 93       	push	r28
     836:	c8 2f       	mov	r28, r24
	
	write_high_nibble('A',data>>4);
     838:	68 2f       	mov	r22, r24
     83a:	62 95       	swap	r22
     83c:	6f 70       	andi	r22, 0x0F	; 15
     83e:	81 e4       	ldi	r24, 0x41	; 65
     840:	0e 94 12 02 	call	0x424	; 0x424 <write_high_nibble>
	DIO_write('A',RS,1);
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	81 e4       	ldi	r24, 0x41	; 65
     84a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	send_falling_edge();
     84e:	0e 94 82 03 	call	0x704	; 0x704 <send_falling_edge>
	write_high_nibble('A',data);
     852:	6c 2f       	mov	r22, r28
     854:	81 e4       	ldi	r24, 0x41	; 65
     856:	0e 94 12 02 	call	0x424	; 0x424 <write_high_nibble>
	DIO_write('A',RS,1);
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	81 e4       	ldi	r24, 0x41	; 65
     860:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_write>
	send_falling_edge();
     864:	0e 94 82 03 	call	0x704	; 0x704 <send_falling_edge>
     868:	8f ec       	ldi	r24, 0xCF	; 207
     86a:	97 e0       	ldi	r25, 0x07	; 7
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <__stack+0xd>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
     872:	00 00       	nop
	
	_delay_ms(1);
}
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     87e:	03 c0       	rjmp	.+6      	; 0x886 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
     880:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_vSend_char>
		data++;
     884:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
     886:	88 81       	ld	r24, Y
     888:	81 11       	cpse	r24, r1
     88a:	fa cf       	rjmp	.-12     	; 0x880 <LCD_vSend_string+0x8>
     88c:	2f e7       	ldi	r18, 0x7F	; 127
     88e:	88 e3       	ldi	r24, 0x38	; 56
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	21 50       	subi	r18, 0x01	; 1
     894:	80 40       	sbci	r24, 0x00	; 0
     896:	90 40       	sbci	r25, 0x00	; 0
     898:	e1 f7       	brne	.-8      	; 0x892 <LCD_vSend_string+0x1a>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <LCD_vSend_string+0x24>
     89c:	00 00       	nop
	{
		LCD_vSend_char(*data);
		data++;
	}
	_delay_ms(50);
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 99 03 	call	0x732	; 0x732 <LCD_vSend_cmd>
     8aa:	8f e1       	ldi	r24, 0x1F	; 31
     8ac:	9e e4       	ldi	r25, 0x4E	; 78
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <LCD_clearscreen+0xa>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <LCD_clearscreen+0x10>
     8b4:	00 00       	nop
     8b6:	08 95       	ret

000008b8 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(uint8_ row,uint8_ coloumn)
{
	uint8_ data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
     8b8:	9f ef       	ldi	r25, 0xFF	; 255
     8ba:	98 0f       	add	r25, r24
     8bc:	92 30       	cpi	r25, 0x02	; 2
     8be:	70 f4       	brcc	.+28     	; 0x8dc <LCD_movecursor+0x24>
     8c0:	61 31       	cpi	r22, 0x11	; 17
     8c2:	70 f4       	brcc	.+28     	; 0x8e0 <LCD_movecursor+0x28>
     8c4:	66 23       	and	r22, r22
     8c6:	71 f0       	breq	.+28     	; 0x8e4 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	19 f4       	brne	.+6      	; 0x8d2 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
     8cc:	2f e7       	ldi	r18, 0x7F	; 127
     8ce:	26 0f       	add	r18, r22
     8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <LCD_movecursor+0x2e>
	}
	else if (row==2)
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	41 f4       	brne	.+16     	; 0x8e6 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
     8d6:	2f eb       	ldi	r18, 0xBF	; 191
     8d8:	26 0f       	add	r18, r22
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <LCD_movecursor+0x2e>
void LCD_movecursor(uint8_ row,uint8_ coloumn)
{
	uint8_ data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
     8dc:	20 e8       	ldi	r18, 0x80	; 128
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <LCD_movecursor+0x2e>
     8e0:	20 e8       	ldi	r18, 0x80	; 128
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <LCD_movecursor+0x2e>
     8e4:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
     8e6:	82 2f       	mov	r24, r18
     8e8:	0e 94 99 03 	call	0x732	; 0x732 <LCD_vSend_cmd>
     8ec:	8f ec       	ldi	r24, 0xCF	; 207
     8ee:	97 e0       	ldi	r25, 0x07	; 7
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <LCD_movecursor+0x38>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <LCD_movecursor+0x3e>
     8f6:	00 00       	nop
     8f8:	08 95       	ret

000008fa <main>:


int main(void)
{

    TC72Init();
     8fa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <TC72Init>
	display_on();
     8fe:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <display_on>
    keypad_vInit();
     902:	0e 94 50 02 	call	0x4a0	; 0x4a0 <keypad_vInit>
    potentiometer_init();
     906:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <potentiometer_init>
    welcome();
     90a:	0e 94 f6 05 	call	0xbec	; 0xbec <welcome>
    external_intrrupt2();
     90e:	0e 94 38 02 	call	0x470	; 0x470 <external_intrrupt2>


    uint8_ error_state=0;
     912:	c0 e0       	ldi	r28, 0x00	; 0
     914:	91 e0       	ldi	r25, 0x01	; 1


    while (1)
    {
        /* standby mode */
        if (loop1==1)
     916:	91 30       	cpi	r25, 0x01	; 1
     918:	49 f4       	brne	.+18     	; 0x92c <main+0x32>
        {
            IDLE_screen(set_temp,current_temp,"STANDBY");
     91a:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <current_temp>
     91e:	42 e6       	ldi	r20, 0x62	; 98
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     926:	0e 94 30 06 	call	0xc60	; 0xc60 <IDLE_screen>
            loop1=0;
     92a:	90 e0       	ldi	r25, 0x00	; 0
        }


        if ( exit_loop=='#' )
     92c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <exit_loop>
     930:	83 32       	cpi	r24, 0x23	; 35
     932:	89 f7       	brne	.-30     	; 0x916 <main+0x1c>
        {
            /* enter operational mode */
            enter_temp();
     934:	0e 94 9a 06 	call	0xd34	; 0xd34 <enter_temp>
            set_temp=input_keypad();
     938:	0e 94 5f 03 	call	0x6be	; 0x6be <input_keypad>
     93c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
            exit_loop=0;
     940:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <exit_loop>
            interrupt_1ms();
     944:	0e 94 43 02 	call	0x486	; 0x486 <interrupt_1ms>
            loop1=1;
            error1=1;
			normal1=1;
			operational=1;
     948:	11 e0       	ldi	r17, 0x01	; 1
            set_temp=input_keypad();
            exit_loop=0;
            interrupt_1ms();
            loop1=1;
            error1=1;
			normal1=1;
     94a:	01 e0       	ldi	r16, 0x01	; 1
            enter_temp();
            set_temp=input_keypad();
            exit_loop=0;
            interrupt_1ms();
            loop1=1;
            error1=1;
     94c:	ff 24       	eor	r15, r15
     94e:	f3 94       	inc	r15
            /* enter operational mode */
            enter_temp();
            set_temp=input_keypad();
            exit_loop=0;
            interrupt_1ms();
            loop1=1;
     950:	d1 e0       	ldi	r29, 0x01	; 1
     952:	07 c0       	rjmp	.+14     	; 0x962 <main+0x68>
                    {
                         error_state_dis();
                         error1=0;
                    }

                    error_state=1;
     954:	c1 e0       	ldi	r28, 0x01	; 1
     956:	05 c0       	rjmp	.+10     	; 0x962 <main+0x68>
                        minutes3=0;
                        error_state=1;
                    }
					if (operational==1)
					{
						loop1=1;
     958:	d1 e0       	ldi	r29, 0x01	; 1
						error_state=0;
     95a:	c0 e0       	ldi	r28, 0x00	; 0
     95c:	02 c0       	rjmp	.+4      	; 0x962 <main+0x68>
                }
				else if ( (current_temp > set_temp) && ((current_temp - set_temp)>5)  )
				{
					if (operational==1)
					{
						loop1=1;
     95e:	d1 e0       	ldi	r29, 0x01	; 1
						error_state=0;
     960:	c0 e0       	ldi	r28, 0x00	; 0
			operational=1;
			
            while(1) /* operational mode: */
            {

                if (error_state==0 && loop1==1)
     962:	c1 11       	cpse	r28, r1
     964:	0e c0       	rjmp	.+28     	; 0x982 <main+0x88>
     966:	d1 30       	cpi	r29, 0x01	; 1
     968:	61 f4       	brne	.+24     	; 0x982 <main+0x88>
                {
                    IDLE_screen(set_temp,current_temp,"OPERATION");
     96a:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <current_temp>
     96e:	4a e6       	ldi	r20, 0x6A	; 106
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     976:	0e 94 30 06 	call	0xc60	; 0xc60 <IDLE_screen>
                    loop1=0;
					normal1=1;
					operational=0;
     97a:	10 e0       	ldi	r17, 0x00	; 0

                if (error_state==0 && loop1==1)
                {
                    IDLE_screen(set_temp,current_temp,"OPERATION");
                    loop1=0;
					normal1=1;
     97c:	01 e0       	ldi	r16, 0x01	; 1
            {

                if (error_state==0 && loop1==1)
                {
                    IDLE_screen(set_temp,current_temp,"OPERATION");
                    loop1=0;
     97e:	d0 e0       	ldi	r29, 0x00	; 0
					normal1=1;
					operational=0;
     980:	04 c0       	rjmp	.+8      	; 0x98a <main+0x90>
					
                }
                else
                {
					/* change current temperature reading on display  */
                    current_temp_dis(current_temp);
     982:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <current_temp>
     986:	0e 94 b0 06 	call	0xd60	; 0xd60 <current_temp_dis>
					
                }
				
				
                if (set_temp <= current_temp)
     98a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     98e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <current_temp>
     992:	86 17       	cp	r24, r22
     994:	d0 f4       	brcc	.+52     	; 0x9ca <main+0xd0>
                {
                    Vt=0;
                }
                else
                {
                    Vt=( ( (float8_)(set_temp - current_temp) / 100.0) *10.0 );
     996:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <current_temp>
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	68 1b       	sub	r22, r24
     99e:	71 09       	sbc	r23, r1
     9a0:	07 2e       	mov	r0, r23
     9a2:	00 0c       	add	r0, r0
     9a4:	88 0b       	sbc	r24, r24
     9a6:	99 0b       	sbc	r25, r25
     9a8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__floatsisf>
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	48 ec       	ldi	r20, 0xC8	; 200
     9b2:	52 e4       	ldi	r21, 0x42	; 66
     9b4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__divsf3>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e2       	ldi	r20, 0x20	; 32
     9be:	51 e4       	ldi	r21, 0x41	; 65
     9c0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsf3>
     9c4:	4b 01       	movw	r8, r22
     9c6:	5c 01       	movw	r10, r24
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <main+0xd6>
                }
				
				
                if (set_temp <= current_temp)
                {
                    Vt=0;
     9ca:	81 2c       	mov	r8, r1
     9cc:	91 2c       	mov	r9, r1
     9ce:	54 01       	movw	r10, r8
                }
                else
                {
                    Vt=( ( (float8_)(set_temp - current_temp) / 100.0) *10.0 );
                }
                Vr=(float8_)potentiometer_read();
     9d0:	0e 94 ed 05 	call	0xbda	; 0xbda <potentiometer_read>
     9d4:	bc 01       	movw	r22, r24
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__floatunsisf>
                duty_cycle = (( ((Vr*2.0)/10.0)*Vt)/10);
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
     9e2:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e2       	ldi	r20, 0x20	; 32
     9ec:	51 e4       	ldi	r21, 0x41	; 65
     9ee:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__divsf3>
     9f2:	9b 01       	movw	r18, r22
     9f4:	ac 01       	movw	r20, r24
     9f6:	c5 01       	movw	r24, r10
     9f8:	b4 01       	movw	r22, r8
     9fa:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsf3>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e2       	ldi	r20, 0x20	; 32
     a04:	51 e4       	ldi	r21, 0x41	; 65
     a06:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__divsf3>
                PWM_generate(duty_cycle);
     a0a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <PWM_generate>
				
                /* 6-system state */
                if ( (current_temp > set_temp) && ((current_temp - set_temp)<=5) )
     a0e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <current_temp>
     a12:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     a16:	89 17       	cp	r24, r25
     a18:	e0 f4       	brcc	.+56     	; 0xa52 <main+0x158>
     a1a:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <current_temp>
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	28 1b       	sub	r18, r24
     a22:	31 09       	sbc	r19, r1
     a24:	26 30       	cpi	r18, 0x06	; 6
     a26:	31 05       	cpc	r19, r1
     a28:	a4 f4       	brge	.+40     	; 0xa52 <main+0x158>
                {
                    /* enter normal state */
                    PWM_generate(0.0); /* zero duty cycle*/
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	cb 01       	movw	r24, r22
     a30:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <PWM_generate>
					if (normal1==1)
     a34:	01 30       	cpi	r16, 0x01	; 1
     a36:	39 f4       	brne	.+14     	; 0xa46 <main+0x14c>
					{
						NORMAL_state(set_temp,current_temp);
     a38:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <current_temp>
     a3c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     a40:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <NORMAL_state>
						normal1=0;
     a44:	00 e0       	ldi	r16, 0x00	; 0
					}
					operational=1;
					minutes3=0;
     a46:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <minutes3+0x1>
     a4a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <minutes3>
					if (normal1==1)
					{
						NORMAL_state(set_temp,current_temp);
						normal1=0;
					}
					operational=1;
     a4e:	11 e0       	ldi	r17, 0x01	; 1
					minutes3=0;
     a50:	88 cf       	rjmp	.-240    	; 0x962 <main+0x68>
                }
                else if ( (current_temp < set_temp) && ((set_temp - current_temp)<=5) )
     a52:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <current_temp>
     a56:	98 17       	cp	r25, r24
     a58:	e8 f4       	brcc	.+58     	; 0xa94 <main+0x19a>
     a5a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <current_temp>
     a5e:	28 2f       	mov	r18, r24
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	29 1b       	sub	r18, r25
     a64:	31 09       	sbc	r19, r1
     a66:	26 30       	cpi	r18, 0x06	; 6
     a68:	31 05       	cpc	r19, r1
     a6a:	a4 f4       	brge	.+40     	; 0xa94 <main+0x19a>
                {
                    /* enter normal state */
                    PWM_generate(0.0); /* zero duty cycle*/
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	cb 01       	movw	r24, r22
     a72:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <PWM_generate>
					if (normal1==1)
     a76:	01 30       	cpi	r16, 0x01	; 1
     a78:	39 f4       	brne	.+14     	; 0xa88 <main+0x18e>
					{
						NORMAL_state(set_temp,current_temp);
     a7a:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <current_temp>
     a7e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     a82:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <NORMAL_state>
						normal1=0;
     a86:	00 e0       	ldi	r16, 0x00	; 0
					}
					operational=1;
					minutes3=0;
     a88:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <minutes3+0x1>
     a8c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <minutes3>
					if (normal1==1)
					{
						NORMAL_state(set_temp,current_temp);
						normal1=0;
					}
					operational=1;
     a90:	11 e0       	ldi	r17, 0x01	; 1
					minutes3=0;
     a92:	67 cf       	rjmp	.-306    	; 0x962 <main+0x68>
                }
				
                else if ( (current_temp > set_temp) && ( (current_temp - set_temp) >10 ))
     a94:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <current_temp>
     a98:	89 17       	cp	r24, r25
     a9a:	b8 f4       	brcc	.+46     	; 0xaca <main+0x1d0>
     a9c:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <current_temp>
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	28 1b       	sub	r18, r24
     aa4:	31 09       	sbc	r19, r1
     aa6:	2b 30       	cpi	r18, 0x0B	; 11
     aa8:	31 05       	cpc	r19, r1
     aaa:	7c f0       	brlt	.+30     	; 0xaca <main+0x1d0>
                {
                    /* enter error state */
                    PWM_generate(0.0); /* zero duty cycle*/
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	cb 01       	movw	r24, r22
     ab2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <PWM_generate>
                    diable_interrupts();
     ab6:	0e 94 46 02 	call	0x48c	; 0x48c <diable_interrupts>
					
                    if (error1==1)
     aba:	21 e0       	ldi	r18, 0x01	; 1
     abc:	f2 12       	cpse	r15, r18
     abe:	4a cf       	rjmp	.-364    	; 0x954 <main+0x5a>
                    {
                         error_state_dis();
     ac0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <error_state_dis>
                         error1=0;
     ac4:	f1 2c       	mov	r15, r1
                    }

                    error_state=1;
     ac6:	c1 e0       	ldi	r28, 0x01	; 1
     ac8:	4c cf       	rjmp	.-360    	; 0x962 <main+0x68>
                }
				
                else if ( (set_temp > current_temp) && ((set_temp - current_temp)>5) )
     aca:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <current_temp>
     ace:	98 17       	cp	r25, r24
     ad0:	10 f5       	brcc	.+68     	; 0xb16 <main+0x21c>
     ad2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <current_temp>
     ad6:	28 2f       	mov	r18, r24
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	29 1b       	sub	r18, r25
     adc:	31 09       	sbc	r19, r1
     ade:	26 30       	cpi	r18, 0x06	; 6
     ae0:	31 05       	cpc	r19, r1
     ae2:	cc f0       	brlt	.+50     	; 0xb16 <main+0x21c>
                {

                    if (minutes3 > 18000)
     ae4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <minutes3>
     ae8:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <minutes3+0x1>
     aec:	81 35       	cpi	r24, 0x51	; 81
     aee:	96 44       	sbci	r25, 0x46	; 70
     af0:	70 f0       	brcs	.+28     	; 0xb0e <main+0x214>
                    {
                        /* error state */

                        PWM_generate(0.0); /* zero duty cycle*/
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	cb 01       	movw	r24, r22
     af8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <PWM_generate>
                        diable_interrupts();
     afc:	0e 94 46 02 	call	0x48c	; 0x48c <diable_interrupts>
                        error_state_dis();
     b00:	0e 94 a5 06 	call	0xd4a	; 0xd4a <error_state_dis>
                        minutes3=0;
     b04:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <minutes3+0x1>
     b08:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <minutes3>
                        error_state=1;
     b0c:	c1 e0       	ldi	r28, 0x01	; 1
                    }
					if (operational==1)
     b0e:	11 30       	cpi	r17, 0x01	; 1
     b10:	09 f0       	breq	.+2      	; 0xb14 <main+0x21a>
     b12:	27 cf       	rjmp	.-434    	; 0x962 <main+0x68>
     b14:	21 cf       	rjmp	.-446    	; 0x958 <main+0x5e>
						error_state=0;
						
					}	
					
                }
                else if (exit_loop=='#')
     b16:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <exit_loop>
     b1a:	93 32       	cpi	r25, 0x23	; 35
     b1c:	19 f4       	brne	.+6      	; 0xb24 <main+0x22a>
                {
                    exit_loop=0;
     b1e:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <exit_loop>
                    loop1=1;
                    break;
     b22:	f8 ce       	rjmp	.-528    	; 0x914 <main+0x1a>
                }
				else if ( (current_temp > set_temp) && ((current_temp - set_temp)>5)  )
     b24:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <current_temp>
     b28:	89 17       	cp	r24, r25
     b2a:	08 f0       	brcs	.+2      	; 0xb2e <main+0x234>
     b2c:	1a cf       	rjmp	.-460    	; 0x962 <main+0x68>
     b2e:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <current_temp>
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	a9 01       	movw	r20, r18
     b36:	48 1b       	sub	r20, r24
     b38:	51 09       	sbc	r21, r1
     b3a:	46 30       	cpi	r20, 0x06	; 6
     b3c:	51 05       	cpc	r21, r1
     b3e:	0c f4       	brge	.+2      	; 0xb42 <main+0x248>
     b40:	10 cf       	rjmp	.-480    	; 0x962 <main+0x68>
				{
					if (operational==1)
     b42:	11 30       	cpi	r17, 0x01	; 1
     b44:	09 f0       	breq	.+2      	; 0xb48 <main+0x24e>
     b46:	0d cf       	rjmp	.-486    	; 0x962 <main+0x68>
     b48:	0a cf       	rjmp	.-492    	; 0x95e <main+0x64>

00000b4a <__vector_4>:
    }
	
}

ISR(TIMER2_COMP_vect)
{
     b4a:	1f 92       	push	r1
     b4c:	0f 92       	push	r0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	0f 92       	push	r0
     b52:	11 24       	eor	r1, r1
     b54:	2f 93       	push	r18
     b56:	3f 93       	push	r19
     b58:	4f 93       	push	r20
     b5a:	5f 93       	push	r21
     b5c:	6f 93       	push	r22
     b5e:	7f 93       	push	r23
     b60:	8f 93       	push	r24
     b62:	9f 93       	push	r25
     b64:	af 93       	push	r26
     b66:	bf 93       	push	r27
     b68:	ef 93       	push	r30
     b6a:	ff 93       	push	r31
    static uint8_ notify200ms=0;
    minutes3++;
     b6c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <minutes3>
     b70:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <minutes3+0x1>
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <minutes3+0x1>
     b7a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <minutes3>
    notify200ms++;
     b7e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
     b82:	8f 5f       	subi	r24, 0xFF	; 255
     b84:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
    if (notify200ms == 200)
     b88:	88 3c       	cpi	r24, 0xC8	; 200
     b8a:	21 f4       	brne	.+8      	; 0xb94 <__vector_4+0x4a>
    {
        current_temp = TC72_GetReading();
     b8c:	0e 94 01 07 	call	0xe02	; 0xe02 <TC72_GetReading>
     b90:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <current_temp>
    }
}
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <__vector_3>:

ISR(INT2_vect)
{
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	8f 93       	push	r24
    exit_loop='#';
     bc2:	83 e2       	ldi	r24, 0x23	; 35
     bc4:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <exit_loop>
}
     bc8:	8f 91       	pop	r24
     bca:	0f 90       	pop	r0
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	0f 90       	pop	r0
     bd0:	1f 90       	pop	r1
     bd2:	18 95       	reti

00000bd4 <potentiometer_init>:
#include "potentiometer.h"


void potentiometer_init(void)
{
	ADC_init();
     bd4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
     bd8:	08 95       	ret

00000bda <potentiometer_read>:
}

uint16_ potentiometer_read(void)
{
	return ADC_read();
     bda:	0e 94 56 00 	call	0xac	; 0xac <ADC_read>
}
     bde:	08 95       	ret

00000be0 <PWM_generate>:
#include "Timer.h"


void PWM_generate(float8_ PWM_duty_cycle)
{
	timer0_OC0_fastPWM( PWM_duty_cycle);
     be0:	0e 94 23 07 	call	0xe46	; 0xe46 <timer0_OC0_fastPWM>
     be4:	08 95       	ret

00000be6 <display_on>:
#include "screen.h"

/* Initialize LCD */
void display_on()
{
	LCD_vInit();
     be6:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_vInit>
     bea:	08 95       	ret

00000bec <welcome>:
}

void welcome()
{
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
	uint8_ move=0;
	uint8_ iteration=0;
	for (iteration=1; iteration<=3;iteration++)
     bf0:	d1 e0       	ldi	r29, 0x01	; 1
     bf2:	31 c0       	rjmp	.+98     	; 0xc56 <welcome+0x6a>
	{
		
		for (move=1; move < 11; move++ )
		{
			LCD_clearscreen();
     bf4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_clearscreen>
			LCD_movecursor(1,move);
     bf8:	6c 2f       	mov	r22, r28
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
			LCD_vSend_string("WELCOME");
     c00:	84 e7       	ldi	r24, 0x74	; 116
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_vSend_string>
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	80 e7       	ldi	r24, 0x70	; 112
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	21 50       	subi	r18, 0x01	; 1
     c10:	80 40       	sbci	r24, 0x00	; 0
     c12:	90 40       	sbci	r25, 0x00	; 0
     c14:	e1 f7       	brne	.-8      	; 0xc0e <welcome+0x22>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <welcome+0x2c>
     c18:	00 00       	nop
	uint8_ move=0;
	uint8_ iteration=0;
	for (iteration=1; iteration<=3;iteration++)
	{
		
		for (move=1; move < 11; move++ )
     c1a:	cf 5f       	subi	r28, 0xFF	; 255
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <welcome+0x34>
     c1e:	c1 e0       	ldi	r28, 0x01	; 1
     c20:	cb 30       	cpi	r28, 0x0B	; 11
     c22:	40 f3       	brcs	.-48     	; 0xbf4 <welcome+0x8>
     c24:	c9 e0       	ldi	r28, 0x09	; 9
     c26:	14 c0       	rjmp	.+40     	; 0xc50 <welcome+0x64>
			LCD_vSend_string("WELCOME");
			_delay_ms(100);
		}
		for (move=9; move > 0; move-- )
		{
			LCD_clearscreen();
     c28:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_clearscreen>
			LCD_movecursor(1,move);
     c2c:	6c 2f       	mov	r22, r28
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
			LCD_vSend_string("WELCOME");
     c34:	84 e7       	ldi	r24, 0x74	; 116
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_vSend_string>
     c3c:	2f ef       	ldi	r18, 0xFF	; 255
     c3e:	80 e7       	ldi	r24, 0x70	; 112
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	21 50       	subi	r18, 0x01	; 1
     c44:	80 40       	sbci	r24, 0x00	; 0
     c46:	90 40       	sbci	r25, 0x00	; 0
     c48:	e1 f7       	brne	.-8      	; 0xc42 <welcome+0x56>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <welcome+0x60>
     c4c:	00 00       	nop
			LCD_clearscreen();
			LCD_movecursor(1,move);
			LCD_vSend_string("WELCOME");
			_delay_ms(100);
		}
		for (move=9; move > 0; move-- )
     c4e:	c1 50       	subi	r28, 0x01	; 1
     c50:	c1 11       	cpse	r28, r1
     c52:	ea cf       	rjmp	.-44     	; 0xc28 <welcome+0x3c>

void welcome()
{
	uint8_ move=0;
	uint8_ iteration=0;
	for (iteration=1; iteration<=3;iteration++)
     c54:	df 5f       	subi	r29, 0xFF	; 255
     c56:	d4 30       	cpi	r29, 0x04	; 4
     c58:	10 f3       	brcs	.-60     	; 0xc1e <welcome+0x32>
			LCD_movecursor(1,move);
			LCD_vSend_string("WELCOME");
			_delay_ms(100);
		}
	}
}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <IDLE_screen>:

void IDLE_screen(uint8_ set_temp, uint8_ crt_temp, char *sys_sts )
{
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	e8 2e       	mov	r14, r24
     c6e:	f6 2e       	mov	r15, r22
     c70:	8a 01       	movw	r16, r20
	LCD_clearscreen();
     c72:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_clearscreen>
	LCD_movecursor(1,1);
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_string("SET:");
     c7e:	8c e7       	ldi	r24, 0x7C	; 124
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_vSend_string>
	LCD_movecursor(1,5);
     c86:	65 e0       	ldi	r22, 0x05	; 5
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_char((set_temp/10)+48);
     c8e:	cd ec       	ldi	r28, 0xCD	; 205
     c90:	ec 9e       	mul	r14, r28
     c92:	d1 2d       	mov	r29, r1
     c94:	11 24       	eor	r1, r1
     c96:	d6 95       	lsr	r29
     c98:	d6 95       	lsr	r29
     c9a:	d6 95       	lsr	r29
     c9c:	80 e3       	ldi	r24, 0x30	; 48
     c9e:	8d 0f       	add	r24, r29
     ca0:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_vSend_char>
	LCD_movecursor(1,6);
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_char((set_temp%10)+48);
     cac:	dd 0f       	add	r29, r29
     cae:	8d 2f       	mov	r24, r29
     cb0:	88 0f       	add	r24, r24
     cb2:	88 0f       	add	r24, r24
     cb4:	d8 0f       	add	r29, r24
     cb6:	8e 2d       	mov	r24, r14
     cb8:	8d 1b       	sub	r24, r29
     cba:	80 5d       	subi	r24, 0xD0	; 208
     cbc:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_vSend_char>
	LCD_movecursor(1,11);
     cc0:	6b e0       	ldi	r22, 0x0B	; 11
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_string("CRT:");
     cc8:	81 e8       	ldi	r24, 0x81	; 129
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_vSend_string>
	LCD_movecursor(1,15);
     cd0:	6f e0       	ldi	r22, 0x0F	; 15
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_char((crt_temp/10)+48);
     cd8:	fc 9e       	mul	r15, r28
     cda:	c1 2d       	mov	r28, r1
     cdc:	11 24       	eor	r1, r1
     cde:	c6 95       	lsr	r28
     ce0:	c6 95       	lsr	r28
     ce2:	c6 95       	lsr	r28
     ce4:	80 e3       	ldi	r24, 0x30	; 48
     ce6:	8c 0f       	add	r24, r28
     ce8:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_vSend_char>
	LCD_movecursor(1,16);
     cec:	60 e1       	ldi	r22, 0x10	; 16
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_char((crt_temp%10)+48);
     cf4:	cc 0f       	add	r28, r28
     cf6:	8c 2f       	mov	r24, r28
     cf8:	88 0f       	add	r24, r24
     cfa:	88 0f       	add	r24, r24
     cfc:	c8 0f       	add	r28, r24
     cfe:	8f 2d       	mov	r24, r15
     d00:	8c 1b       	sub	r24, r28
     d02:	80 5d       	subi	r24, 0xD0	; 208
     d04:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_vSend_char>
	LCD_movecursor(2,1);
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_string("STATE:");
     d10:	86 e8       	ldi	r24, 0x86	; 134
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_vSend_string>
	LCD_movecursor(2,7);
     d18:	67 e0       	ldi	r22, 0x07	; 7
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_string(sys_sts);
     d20:	c8 01       	movw	r24, r16
     d22:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_vSend_string>
	/*_delay_ms(100);*/
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	08 95       	ret

00000d34 <enter_temp>:

void enter_temp(void)
{
	LCD_clearscreen();
     d34:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_clearscreen>
	LCD_movecursor(1,1);
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_string("Enter Temperature");
     d40:	8d e8       	ldi	r24, 0x8D	; 141
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_vSend_string>
     d48:	08 95       	ret

00000d4a <error_state_dis>:
	
}

void error_state_dis(void)
{
	LCD_clearscreen();
     d4a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_clearscreen>
	LCD_movecursor(1,1);
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_string("ERROR STATE");
     d56:	8f e9       	ldi	r24, 0x9F	; 159
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_vSend_string>
     d5e:	08 95       	ret

00000d60 <current_temp_dis>:
}
void current_temp_dis(uint8_ temp)
{
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	d8 2f       	mov	r29, r24
	LCD_movecursor(1,15);
     d66:	6f e0       	ldi	r22, 0x0F	; 15
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_char((temp/10)+48);
     d6e:	cd ec       	ldi	r28, 0xCD	; 205
     d70:	dc 9f       	mul	r29, r28
     d72:	c1 2d       	mov	r28, r1
     d74:	11 24       	eor	r1, r1
     d76:	c6 95       	lsr	r28
     d78:	c6 95       	lsr	r28
     d7a:	c6 95       	lsr	r28
     d7c:	80 e3       	ldi	r24, 0x30	; 48
     d7e:	8c 0f       	add	r24, r28
     d80:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_vSend_char>
	LCD_movecursor(1,16);
     d84:	60 e1       	ldi	r22, 0x10	; 16
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_movecursor>
	LCD_vSend_char((temp%10)+48);
     d8c:	cc 0f       	add	r28, r28
     d8e:	8c 2f       	mov	r24, r28
     d90:	88 0f       	add	r24, r24
     d92:	88 0f       	add	r24, r24
     d94:	c8 0f       	add	r28, r24
     d96:	8d 2f       	mov	r24, r29
     d98:	8c 1b       	sub	r24, r28
     d9a:	80 5d       	subi	r24, 0xD0	; 208
     d9c:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_vSend_char>
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <SPI_MasterInit>:
     da6:	87 b3       	in	r24, 0x17	; 23
     da8:	80 6b       	ori	r24, 0xB0	; 176
     daa:	87 bb       	out	0x17, r24	; 23
     dac:	87 e5       	ldi	r24, 0x57	; 87
     dae:	8d b9       	out	0x0d, r24	; 13
     db0:	1e b8       	out	0x0e, r1	; 14
     db2:	08 95       	ret

00000db4 <SPI_transmit>:
     db4:	8f b9       	out	0x0f, r24	; 15
     db6:	8e b1       	in	r24, 0x0e	; 14
     db8:	88 23       	and	r24, r24
     dba:	e9 f3       	breq	.-6      	; 0xdb6 <SPI_transmit+0x2>
     dbc:	08 95       	ret

00000dbe <SPI_recieve>:
     dbe:	8e b1       	in	r24, 0x0e	; 14
     dc0:	88 23       	and	r24, r24
     dc2:	e9 f3       	breq	.-6      	; 0xdbe <SPI_recieve>
     dc4:	8f b1       	in	r24, 0x0f	; 15
     dc6:	08 95       	ret

00000dc8 <NORMAL_state>:
	
	IDLE_screen((uint8_)25,(uint8_)25,"STANDBY");
}
void NORMAL_state(uint8_ set_temp,uint8_ cur_temp )
{
	IDLE_screen(set_temp,cur_temp,"NORMAL");
     dc8:	4b ea       	ldi	r20, 0xAB	; 171
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	0e 94 30 06 	call	0xc60	; 0xc60 <IDLE_screen>
     dd0:	08 95       	ret

00000dd2 <TC72Init>:
     dd2:	0e 94 d3 06 	call	0xda6	; 0xda6 <SPI_MasterInit>
     dd6:	88 b3       	in	r24, 0x18	; 24
     dd8:	80 61       	ori	r24, 0x10	; 16
     dda:	88 bb       	out	0x18, r24	; 24
     ddc:	80 e8       	ldi	r24, 0x80	; 128
     dde:	0e 94 da 06 	call	0xdb4	; 0xdb4 <SPI_transmit>
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <SPI_transmit>
     de8:	88 b3       	in	r24, 0x18	; 24
     dea:	8f 7e       	andi	r24, 0xEF	; 239
     dec:	88 bb       	out	0x18, r24	; 24
     dee:	2f e7       	ldi	r18, 0x7F	; 127
     df0:	89 ea       	ldi	r24, 0xA9	; 169
     df2:	93 e0       	ldi	r25, 0x03	; 3
     df4:	21 50       	subi	r18, 0x01	; 1
     df6:	80 40       	sbci	r24, 0x00	; 0
     df8:	90 40       	sbci	r25, 0x00	; 0
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <TC72Init+0x22>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <TC72Init+0x2c>
     dfe:	00 00       	nop
     e00:	08 95       	ret

00000e02 <TC72_GetReading>:
     e02:	88 b3       	in	r24, 0x18	; 24
     e04:	80 61       	ori	r24, 0x10	; 16
     e06:	88 bb       	out	0x18, r24	; 24
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <SPI_transmit>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	0e 94 da 06 	call	0xdb4	; 0xdb4 <SPI_transmit>
     e14:	88 b3       	in	r24, 0x18	; 24
     e16:	8f 7e       	andi	r24, 0xEF	; 239
     e18:	88 bb       	out	0x18, r24	; 24
     e1a:	8f ec       	ldi	r24, 0xCF	; 207
     e1c:	97 e0       	ldi	r25, 0x07	; 7
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <TC72_GetReading+0x1c>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <TC72_GetReading+0x22>
     e24:	00 00       	nop
     e26:	0e 94 df 06 	call	0xdbe	; 0xdbe <SPI_recieve>
     e2a:	08 95       	ret

00000e2c <timer2_CTC_init_interrupt_1ms>:


void timer2_CTC_init_interrupt_1ms(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR2,WGM21);
     e2c:	85 b5       	in	r24, 0x25	; 37
     e2e:	88 60       	ori	r24, 0x08	; 8
     e30:	85 bd       	out	0x25, r24	; 37
	/* load a value in OCR2 */
	OCR2=125;
     e32:	8d e7       	ldi	r24, 0x7D	; 125
     e34:	83 bd       	out	0x23, r24	; 35
	/* select timer clock to be (8000000/1024) */
	SET_BIT(TCCR2,CS22);
     e36:	85 b5       	in	r24, 0x25	; 37
     e38:	84 60       	ori	r24, 0x04	; 4
     e3a:	85 bd       	out	0x25, r24	; 37
	/* enable interrupt*/
	sei();
     e3c:	78 94       	sei
	SET_BIT(TIMSK,OCIE2);
     e3e:	89 b7       	in	r24, 0x39	; 57
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	89 bf       	out	0x39, r24	; 57
     e44:	08 95       	ret

00000e46 <timer0_OC0_fastPWM>:
}

void timer0_OC0_fastPWM(float8_ duty_cycle)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     e46:	27 b3       	in	r18, 0x17	; 23
     e48:	28 60       	ori	r18, 0x08	; 8
     e4a:	27 bb       	out	0x17, r18	; 23
	/* select phase correct PWM mode in timer0*/
	SET_BIT(TCCR0,WGM00);
     e4c:	23 b7       	in	r18, 0x33	; 51
     e4e:	20 64       	ori	r18, 0x40	; 64
     e50:	23 bf       	out	0x33, r18	; 51
	SET_BIT(TCCR0,WGM01);
     e52:	23 b7       	in	r18, 0x33	; 51
     e54:	28 60       	ori	r18, 0x08	; 8
     e56:	23 bf       	out	0x33, r18	; 51
	/* load a value in OCR2 */
	OCR0=(uint8_)((duty_cycle/10)*254);
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	51 e4       	ldi	r21, 0x41	; 65
     e60:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__divsf3>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4e e7       	ldi	r20, 0x7E	; 126
     e6a:	53 e4       	ldi	r21, 0x43	; 67
     e6c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsf3>
     e70:	0e 94 31 08 	call	0x1062	; 0x1062 <__fixunssfsi>
     e74:	6c bf       	out	0x3c, r22	; 60
	
	
	
	/* select wave frequency = (8MHz/8*256) */
	SET_BIT(TCCR0,CS00);
     e76:	83 b7       	in	r24, 0x33	; 51
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
     e7c:	83 b7       	in	r24, 0x33	; 51
     e7e:	82 60       	ori	r24, 0x02	; 2
     e80:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
     e82:	83 b7       	in	r24, 0x33	; 51
     e84:	84 60       	ori	r24, 0x04	; 4
     e86:	83 bf       	out	0x33, r24	; 51
	/*SET_BIT(TCCR2,CS22);*/
	
	/* clear OC0 on compare match, set OC0 at BOTTOM,(non-inverting mode)*/
	CLR_BIT(TCCR0,COM00);
     e88:	83 b7       	in	r24, 0x33	; 51
     e8a:	8f 7e       	andi	r24, 0xEF	; 239
     e8c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
     e8e:	83 b7       	in	r24, 0x33	; 51
     e90:	80 62       	ori	r24, 0x20	; 32
     e92:	83 bf       	out	0x33, r24	; 51
     e94:	08 95       	ret

00000e96 <stop_timer>:



void stop_timer(void)
{
	CLR_BIT(TIMSK,OCIE2);
     e96:	89 b7       	in	r24, 0x39	; 57
     e98:	8f 77       	andi	r24, 0x7F	; 127
     e9a:	89 bf       	out	0x39, r24	; 57
	CLR_BIT(DDRB,3);
     e9c:	87 b3       	in	r24, 0x17	; 23
     e9e:	87 7f       	andi	r24, 0xF7	; 247
     ea0:	87 bb       	out	0x17, r24	; 23
     ea2:	08 95       	ret

00000ea4 <__subsf3>:
     ea4:	50 58       	subi	r21, 0x80	; 128

00000ea6 <__addsf3>:
     ea6:	bb 27       	eor	r27, r27
     ea8:	aa 27       	eor	r26, r26
     eaa:	0e 94 6a 07 	call	0xed4	; 0xed4 <__addsf3x>
     eae:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_round>
     eb2:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscA>
     eb6:	38 f0       	brcs	.+14     	; 0xec6 <__addsf3+0x20>
     eb8:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_pscB>
     ebc:	20 f0       	brcs	.+8      	; 0xec6 <__addsf3+0x20>
     ebe:	39 f4       	brne	.+14     	; 0xece <__addsf3+0x28>
     ec0:	9f 3f       	cpi	r25, 0xFF	; 255
     ec2:	19 f4       	brne	.+6      	; 0xeca <__addsf3+0x24>
     ec4:	26 f4       	brtc	.+8      	; 0xece <__addsf3+0x28>
     ec6:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>
     eca:	0e f4       	brtc	.+2      	; 0xece <__addsf3+0x28>
     ecc:	e0 95       	com	r30
     ece:	e7 fb       	bst	r30, 7
     ed0:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>

00000ed4 <__addsf3x>:
     ed4:	e9 2f       	mov	r30, r25
     ed6:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_split3>
     eda:	58 f3       	brcs	.-42     	; 0xeb2 <__addsf3+0xc>
     edc:	ba 17       	cp	r27, r26
     ede:	62 07       	cpc	r22, r18
     ee0:	73 07       	cpc	r23, r19
     ee2:	84 07       	cpc	r24, r20
     ee4:	95 07       	cpc	r25, r21
     ee6:	20 f0       	brcs	.+8      	; 0xef0 <__addsf3x+0x1c>
     ee8:	79 f4       	brne	.+30     	; 0xf08 <__addsf3x+0x34>
     eea:	a6 f5       	brtc	.+104    	; 0xf54 <__addsf3x+0x80>
     eec:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_zero>
     ef0:	0e f4       	brtc	.+2      	; 0xef4 <__addsf3x+0x20>
     ef2:	e0 95       	com	r30
     ef4:	0b 2e       	mov	r0, r27
     ef6:	ba 2f       	mov	r27, r26
     ef8:	a0 2d       	mov	r26, r0
     efa:	0b 01       	movw	r0, r22
     efc:	b9 01       	movw	r22, r18
     efe:	90 01       	movw	r18, r0
     f00:	0c 01       	movw	r0, r24
     f02:	ca 01       	movw	r24, r20
     f04:	a0 01       	movw	r20, r0
     f06:	11 24       	eor	r1, r1
     f08:	ff 27       	eor	r31, r31
     f0a:	59 1b       	sub	r21, r25
     f0c:	99 f0       	breq	.+38     	; 0xf34 <__addsf3x+0x60>
     f0e:	59 3f       	cpi	r21, 0xF9	; 249
     f10:	50 f4       	brcc	.+20     	; 0xf26 <__addsf3x+0x52>
     f12:	50 3e       	cpi	r21, 0xE0	; 224
     f14:	68 f1       	brcs	.+90     	; 0xf70 <__addsf3x+0x9c>
     f16:	1a 16       	cp	r1, r26
     f18:	f0 40       	sbci	r31, 0x00	; 0
     f1a:	a2 2f       	mov	r26, r18
     f1c:	23 2f       	mov	r18, r19
     f1e:	34 2f       	mov	r19, r20
     f20:	44 27       	eor	r20, r20
     f22:	58 5f       	subi	r21, 0xF8	; 248
     f24:	f3 cf       	rjmp	.-26     	; 0xf0c <__addsf3x+0x38>
     f26:	46 95       	lsr	r20
     f28:	37 95       	ror	r19
     f2a:	27 95       	ror	r18
     f2c:	a7 95       	ror	r26
     f2e:	f0 40       	sbci	r31, 0x00	; 0
     f30:	53 95       	inc	r21
     f32:	c9 f7       	brne	.-14     	; 0xf26 <__addsf3x+0x52>
     f34:	7e f4       	brtc	.+30     	; 0xf54 <__addsf3x+0x80>
     f36:	1f 16       	cp	r1, r31
     f38:	ba 0b       	sbc	r27, r26
     f3a:	62 0b       	sbc	r22, r18
     f3c:	73 0b       	sbc	r23, r19
     f3e:	84 0b       	sbc	r24, r20
     f40:	ba f0       	brmi	.+46     	; 0xf70 <__addsf3x+0x9c>
     f42:	91 50       	subi	r25, 0x01	; 1
     f44:	a1 f0       	breq	.+40     	; 0xf6e <__addsf3x+0x9a>
     f46:	ff 0f       	add	r31, r31
     f48:	bb 1f       	adc	r27, r27
     f4a:	66 1f       	adc	r22, r22
     f4c:	77 1f       	adc	r23, r23
     f4e:	88 1f       	adc	r24, r24
     f50:	c2 f7       	brpl	.-16     	; 0xf42 <__addsf3x+0x6e>
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <__addsf3x+0x9c>
     f54:	ba 0f       	add	r27, r26
     f56:	62 1f       	adc	r22, r18
     f58:	73 1f       	adc	r23, r19
     f5a:	84 1f       	adc	r24, r20
     f5c:	48 f4       	brcc	.+18     	; 0xf70 <__addsf3x+0x9c>
     f5e:	87 95       	ror	r24
     f60:	77 95       	ror	r23
     f62:	67 95       	ror	r22
     f64:	b7 95       	ror	r27
     f66:	f7 95       	ror	r31
     f68:	9e 3f       	cpi	r25, 0xFE	; 254
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <__addsf3x+0x9a>
     f6c:	b0 cf       	rjmp	.-160    	; 0xece <__addsf3+0x28>
     f6e:	93 95       	inc	r25
     f70:	88 0f       	add	r24, r24
     f72:	08 f0       	brcs	.+2      	; 0xf76 <__addsf3x+0xa2>
     f74:	99 27       	eor	r25, r25
     f76:	ee 0f       	add	r30, r30
     f78:	97 95       	ror	r25
     f7a:	87 95       	ror	r24
     f7c:	08 95       	ret

00000f7e <__divsf3>:
     f7e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__divsf3x>
     f82:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_round>
     f86:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_pscB>
     f8a:	58 f0       	brcs	.+22     	; 0xfa2 <__divsf3+0x24>
     f8c:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscA>
     f90:	40 f0       	brcs	.+16     	; 0xfa2 <__divsf3+0x24>
     f92:	29 f4       	brne	.+10     	; 0xf9e <__divsf3+0x20>
     f94:	5f 3f       	cpi	r21, 0xFF	; 255
     f96:	29 f0       	breq	.+10     	; 0xfa2 <__divsf3+0x24>
     f98:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
     f9c:	51 11       	cpse	r21, r1
     f9e:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>
     fa2:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>

00000fa6 <__divsf3x>:
     fa6:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_split3>
     faa:	68 f3       	brcs	.-38     	; 0xf86 <__divsf3+0x8>

00000fac <__divsf3_pse>:
     fac:	99 23       	and	r25, r25
     fae:	b1 f3       	breq	.-20     	; 0xf9c <__divsf3+0x1e>
     fb0:	55 23       	and	r21, r21
     fb2:	91 f3       	breq	.-28     	; 0xf98 <__divsf3+0x1a>
     fb4:	95 1b       	sub	r25, r21
     fb6:	55 0b       	sbc	r21, r21
     fb8:	bb 27       	eor	r27, r27
     fba:	aa 27       	eor	r26, r26
     fbc:	62 17       	cp	r22, r18
     fbe:	73 07       	cpc	r23, r19
     fc0:	84 07       	cpc	r24, r20
     fc2:	38 f0       	brcs	.+14     	; 0xfd2 <__divsf3_pse+0x26>
     fc4:	9f 5f       	subi	r25, 0xFF	; 255
     fc6:	5f 4f       	sbci	r21, 0xFF	; 255
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	44 1f       	adc	r20, r20
     fce:	aa 1f       	adc	r26, r26
     fd0:	a9 f3       	breq	.-22     	; 0xfbc <__divsf3_pse+0x10>
     fd2:	35 d0       	rcall	.+106    	; 0x103e <__divsf3_pse+0x92>
     fd4:	0e 2e       	mov	r0, r30
     fd6:	3a f0       	brmi	.+14     	; 0xfe6 <__divsf3_pse+0x3a>
     fd8:	e0 e8       	ldi	r30, 0x80	; 128
     fda:	32 d0       	rcall	.+100    	; 0x1040 <__divsf3_pse+0x94>
     fdc:	91 50       	subi	r25, 0x01	; 1
     fde:	50 40       	sbci	r21, 0x00	; 0
     fe0:	e6 95       	lsr	r30
     fe2:	00 1c       	adc	r0, r0
     fe4:	ca f7       	brpl	.-14     	; 0xfd8 <__divsf3_pse+0x2c>
     fe6:	2b d0       	rcall	.+86     	; 0x103e <__divsf3_pse+0x92>
     fe8:	fe 2f       	mov	r31, r30
     fea:	29 d0       	rcall	.+82     	; 0x103e <__divsf3_pse+0x92>
     fec:	66 0f       	add	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	bb 1f       	adc	r27, r27
     ff4:	26 17       	cp	r18, r22
     ff6:	37 07       	cpc	r19, r23
     ff8:	48 07       	cpc	r20, r24
     ffa:	ab 07       	cpc	r26, r27
     ffc:	b0 e8       	ldi	r27, 0x80	; 128
     ffe:	09 f0       	breq	.+2      	; 0x1002 <__divsf3_pse+0x56>
    1000:	bb 0b       	sbc	r27, r27
    1002:	80 2d       	mov	r24, r0
    1004:	bf 01       	movw	r22, r30
    1006:	ff 27       	eor	r31, r31
    1008:	93 58       	subi	r25, 0x83	; 131
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	3a f0       	brmi	.+14     	; 0x101c <__divsf3_pse+0x70>
    100e:	9e 3f       	cpi	r25, 0xFE	; 254
    1010:	51 05       	cpc	r21, r1
    1012:	78 f0       	brcs	.+30     	; 0x1032 <__divsf3_pse+0x86>
    1014:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
    1018:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>
    101c:	5f 3f       	cpi	r21, 0xFF	; 255
    101e:	e4 f3       	brlt	.-8      	; 0x1018 <__divsf3_pse+0x6c>
    1020:	98 3e       	cpi	r25, 0xE8	; 232
    1022:	d4 f3       	brlt	.-12     	; 0x1018 <__divsf3_pse+0x6c>
    1024:	86 95       	lsr	r24
    1026:	77 95       	ror	r23
    1028:	67 95       	ror	r22
    102a:	b7 95       	ror	r27
    102c:	f7 95       	ror	r31
    102e:	9f 5f       	subi	r25, 0xFF	; 255
    1030:	c9 f7       	brne	.-14     	; 0x1024 <__divsf3_pse+0x78>
    1032:	88 0f       	add	r24, r24
    1034:	91 1d       	adc	r25, r1
    1036:	96 95       	lsr	r25
    1038:	87 95       	ror	r24
    103a:	97 f9       	bld	r25, 7
    103c:	08 95       	ret
    103e:	e1 e0       	ldi	r30, 0x01	; 1
    1040:	66 0f       	add	r22, r22
    1042:	77 1f       	adc	r23, r23
    1044:	88 1f       	adc	r24, r24
    1046:	bb 1f       	adc	r27, r27
    1048:	62 17       	cp	r22, r18
    104a:	73 07       	cpc	r23, r19
    104c:	84 07       	cpc	r24, r20
    104e:	ba 07       	cpc	r27, r26
    1050:	20 f0       	brcs	.+8      	; 0x105a <__divsf3_pse+0xae>
    1052:	62 1b       	sub	r22, r18
    1054:	73 0b       	sbc	r23, r19
    1056:	84 0b       	sbc	r24, r20
    1058:	ba 0b       	sbc	r27, r26
    105a:	ee 1f       	adc	r30, r30
    105c:	88 f7       	brcc	.-30     	; 0x1040 <__divsf3_pse+0x94>
    105e:	e0 95       	com	r30
    1060:	08 95       	ret

00001062 <__fixunssfsi>:
    1062:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_splitA>
    1066:	88 f0       	brcs	.+34     	; 0x108a <__fixunssfsi+0x28>
    1068:	9f 57       	subi	r25, 0x7F	; 127
    106a:	98 f0       	brcs	.+38     	; 0x1092 <__fixunssfsi+0x30>
    106c:	b9 2f       	mov	r27, r25
    106e:	99 27       	eor	r25, r25
    1070:	b7 51       	subi	r27, 0x17	; 23
    1072:	b0 f0       	brcs	.+44     	; 0x10a0 <__fixunssfsi+0x3e>
    1074:	e1 f0       	breq	.+56     	; 0x10ae <__fixunssfsi+0x4c>
    1076:	66 0f       	add	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	1a f0       	brmi	.+6      	; 0x1086 <__fixunssfsi+0x24>
    1080:	ba 95       	dec	r27
    1082:	c9 f7       	brne	.-14     	; 0x1076 <__fixunssfsi+0x14>
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <__fixunssfsi+0x4c>
    1086:	b1 30       	cpi	r27, 0x01	; 1
    1088:	91 f0       	breq	.+36     	; 0x10ae <__fixunssfsi+0x4c>
    108a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__fp_zero>
    108e:	b1 e0       	ldi	r27, 0x01	; 1
    1090:	08 95       	ret
    1092:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_zero>
    1096:	67 2f       	mov	r22, r23
    1098:	78 2f       	mov	r23, r24
    109a:	88 27       	eor	r24, r24
    109c:	b8 5f       	subi	r27, 0xF8	; 248
    109e:	39 f0       	breq	.+14     	; 0x10ae <__fixunssfsi+0x4c>
    10a0:	b9 3f       	cpi	r27, 0xF9	; 249
    10a2:	cc f3       	brlt	.-14     	; 0x1096 <__fixunssfsi+0x34>
    10a4:	86 95       	lsr	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b3 95       	inc	r27
    10ac:	d9 f7       	brne	.-10     	; 0x10a4 <__fixunssfsi+0x42>
    10ae:	3e f4       	brtc	.+14     	; 0x10be <__fixunssfsi+0x5c>
    10b0:	90 95       	com	r25
    10b2:	80 95       	com	r24
    10b4:	70 95       	com	r23
    10b6:	61 95       	neg	r22
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	8f 4f       	sbci	r24, 0xFF	; 255
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	08 95       	ret

000010c0 <__floatunsisf>:
    10c0:	e8 94       	clt
    10c2:	09 c0       	rjmp	.+18     	; 0x10d6 <__floatsisf+0x12>

000010c4 <__floatsisf>:
    10c4:	97 fb       	bst	r25, 7
    10c6:	3e f4       	brtc	.+14     	; 0x10d6 <__floatsisf+0x12>
    10c8:	90 95       	com	r25
    10ca:	80 95       	com	r24
    10cc:	70 95       	com	r23
    10ce:	61 95       	neg	r22
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	8f 4f       	sbci	r24, 0xFF	; 255
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	99 23       	and	r25, r25
    10d8:	a9 f0       	breq	.+42     	; 0x1104 <__floatsisf+0x40>
    10da:	f9 2f       	mov	r31, r25
    10dc:	96 e9       	ldi	r25, 0x96	; 150
    10de:	bb 27       	eor	r27, r27
    10e0:	93 95       	inc	r25
    10e2:	f6 95       	lsr	r31
    10e4:	87 95       	ror	r24
    10e6:	77 95       	ror	r23
    10e8:	67 95       	ror	r22
    10ea:	b7 95       	ror	r27
    10ec:	f1 11       	cpse	r31, r1
    10ee:	f8 cf       	rjmp	.-16     	; 0x10e0 <__floatsisf+0x1c>
    10f0:	fa f4       	brpl	.+62     	; 0x1130 <__floatsisf+0x6c>
    10f2:	bb 0f       	add	r27, r27
    10f4:	11 f4       	brne	.+4      	; 0x10fa <__floatsisf+0x36>
    10f6:	60 ff       	sbrs	r22, 0
    10f8:	1b c0       	rjmp	.+54     	; 0x1130 <__floatsisf+0x6c>
    10fa:	6f 5f       	subi	r22, 0xFF	; 255
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1100:	9f 4f       	sbci	r25, 0xFF	; 255
    1102:	16 c0       	rjmp	.+44     	; 0x1130 <__floatsisf+0x6c>
    1104:	88 23       	and	r24, r24
    1106:	11 f0       	breq	.+4      	; 0x110c <__floatsisf+0x48>
    1108:	96 e9       	ldi	r25, 0x96	; 150
    110a:	11 c0       	rjmp	.+34     	; 0x112e <__floatsisf+0x6a>
    110c:	77 23       	and	r23, r23
    110e:	21 f0       	breq	.+8      	; 0x1118 <__floatsisf+0x54>
    1110:	9e e8       	ldi	r25, 0x8E	; 142
    1112:	87 2f       	mov	r24, r23
    1114:	76 2f       	mov	r23, r22
    1116:	05 c0       	rjmp	.+10     	; 0x1122 <__floatsisf+0x5e>
    1118:	66 23       	and	r22, r22
    111a:	71 f0       	breq	.+28     	; 0x1138 <__floatsisf+0x74>
    111c:	96 e8       	ldi	r25, 0x86	; 134
    111e:	86 2f       	mov	r24, r22
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	2a f0       	brmi	.+10     	; 0x1130 <__floatsisf+0x6c>
    1126:	9a 95       	dec	r25
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	da f7       	brpl	.-10     	; 0x1126 <__floatsisf+0x62>
    1130:	88 0f       	add	r24, r24
    1132:	96 95       	lsr	r25
    1134:	87 95       	ror	r24
    1136:	97 f9       	bld	r25, 7
    1138:	08 95       	ret

0000113a <__fp_inf>:
    113a:	97 f9       	bld	r25, 7
    113c:	9f 67       	ori	r25, 0x7F	; 127
    113e:	80 e8       	ldi	r24, 0x80	; 128
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	08 95       	ret

00001146 <__fp_nan>:
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	80 ec       	ldi	r24, 0xC0	; 192
    114a:	08 95       	ret

0000114c <__fp_pscA>:
    114c:	00 24       	eor	r0, r0
    114e:	0a 94       	dec	r0
    1150:	16 16       	cp	r1, r22
    1152:	17 06       	cpc	r1, r23
    1154:	18 06       	cpc	r1, r24
    1156:	09 06       	cpc	r0, r25
    1158:	08 95       	ret

0000115a <__fp_pscB>:
    115a:	00 24       	eor	r0, r0
    115c:	0a 94       	dec	r0
    115e:	12 16       	cp	r1, r18
    1160:	13 06       	cpc	r1, r19
    1162:	14 06       	cpc	r1, r20
    1164:	05 06       	cpc	r0, r21
    1166:	08 95       	ret

00001168 <__fp_round>:
    1168:	09 2e       	mov	r0, r25
    116a:	03 94       	inc	r0
    116c:	00 0c       	add	r0, r0
    116e:	11 f4       	brne	.+4      	; 0x1174 <__fp_round+0xc>
    1170:	88 23       	and	r24, r24
    1172:	52 f0       	brmi	.+20     	; 0x1188 <__fp_round+0x20>
    1174:	bb 0f       	add	r27, r27
    1176:	40 f4       	brcc	.+16     	; 0x1188 <__fp_round+0x20>
    1178:	bf 2b       	or	r27, r31
    117a:	11 f4       	brne	.+4      	; 0x1180 <__fp_round+0x18>
    117c:	60 ff       	sbrs	r22, 0
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <__fp_round+0x20>
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	08 95       	ret

0000118a <__fp_split3>:
    118a:	57 fd       	sbrc	r21, 7
    118c:	90 58       	subi	r25, 0x80	; 128
    118e:	44 0f       	add	r20, r20
    1190:	55 1f       	adc	r21, r21
    1192:	59 f0       	breq	.+22     	; 0x11aa <__fp_splitA+0x10>
    1194:	5f 3f       	cpi	r21, 0xFF	; 255
    1196:	71 f0       	breq	.+28     	; 0x11b4 <__fp_splitA+0x1a>
    1198:	47 95       	ror	r20

0000119a <__fp_splitA>:
    119a:	88 0f       	add	r24, r24
    119c:	97 fb       	bst	r25, 7
    119e:	99 1f       	adc	r25, r25
    11a0:	61 f0       	breq	.+24     	; 0x11ba <__fp_splitA+0x20>
    11a2:	9f 3f       	cpi	r25, 0xFF	; 255
    11a4:	79 f0       	breq	.+30     	; 0x11c4 <__fp_splitA+0x2a>
    11a6:	87 95       	ror	r24
    11a8:	08 95       	ret
    11aa:	12 16       	cp	r1, r18
    11ac:	13 06       	cpc	r1, r19
    11ae:	14 06       	cpc	r1, r20
    11b0:	55 1f       	adc	r21, r21
    11b2:	f2 cf       	rjmp	.-28     	; 0x1198 <__fp_split3+0xe>
    11b4:	46 95       	lsr	r20
    11b6:	f1 df       	rcall	.-30     	; 0x119a <__fp_splitA>
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <__fp_splitA+0x30>
    11ba:	16 16       	cp	r1, r22
    11bc:	17 06       	cpc	r1, r23
    11be:	18 06       	cpc	r1, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	f1 cf       	rjmp	.-30     	; 0x11a6 <__fp_splitA+0xc>
    11c4:	86 95       	lsr	r24
    11c6:	71 05       	cpc	r23, r1
    11c8:	61 05       	cpc	r22, r1
    11ca:	08 94       	sec
    11cc:	08 95       	ret

000011ce <__fp_zero>:
    11ce:	e8 94       	clt

000011d0 <__fp_szero>:
    11d0:	bb 27       	eor	r27, r27
    11d2:	66 27       	eor	r22, r22
    11d4:	77 27       	eor	r23, r23
    11d6:	cb 01       	movw	r24, r22
    11d8:	97 f9       	bld	r25, 7
    11da:	08 95       	ret

000011dc <__mulsf3>:
    11dc:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsf3x>
    11e0:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_round>
    11e4:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscA>
    11e8:	38 f0       	brcs	.+14     	; 0x11f8 <__mulsf3+0x1c>
    11ea:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_pscB>
    11ee:	20 f0       	brcs	.+8      	; 0x11f8 <__mulsf3+0x1c>
    11f0:	95 23       	and	r25, r21
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <__mulsf3+0x1c>
    11f4:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
    11f8:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>
    11fc:	11 24       	eor	r1, r1
    11fe:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>

00001202 <__mulsf3x>:
    1202:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_split3>
    1206:	70 f3       	brcs	.-36     	; 0x11e4 <__mulsf3+0x8>

00001208 <__mulsf3_pse>:
    1208:	95 9f       	mul	r25, r21
    120a:	c1 f3       	breq	.-16     	; 0x11fc <__mulsf3+0x20>
    120c:	95 0f       	add	r25, r21
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	55 1f       	adc	r21, r21
    1212:	62 9f       	mul	r22, r18
    1214:	f0 01       	movw	r30, r0
    1216:	72 9f       	mul	r23, r18
    1218:	bb 27       	eor	r27, r27
    121a:	f0 0d       	add	r31, r0
    121c:	b1 1d       	adc	r27, r1
    121e:	63 9f       	mul	r22, r19
    1220:	aa 27       	eor	r26, r26
    1222:	f0 0d       	add	r31, r0
    1224:	b1 1d       	adc	r27, r1
    1226:	aa 1f       	adc	r26, r26
    1228:	64 9f       	mul	r22, r20
    122a:	66 27       	eor	r22, r22
    122c:	b0 0d       	add	r27, r0
    122e:	a1 1d       	adc	r26, r1
    1230:	66 1f       	adc	r22, r22
    1232:	82 9f       	mul	r24, r18
    1234:	22 27       	eor	r18, r18
    1236:	b0 0d       	add	r27, r0
    1238:	a1 1d       	adc	r26, r1
    123a:	62 1f       	adc	r22, r18
    123c:	73 9f       	mul	r23, r19
    123e:	b0 0d       	add	r27, r0
    1240:	a1 1d       	adc	r26, r1
    1242:	62 1f       	adc	r22, r18
    1244:	83 9f       	mul	r24, r19
    1246:	a0 0d       	add	r26, r0
    1248:	61 1d       	adc	r22, r1
    124a:	22 1f       	adc	r18, r18
    124c:	74 9f       	mul	r23, r20
    124e:	33 27       	eor	r19, r19
    1250:	a0 0d       	add	r26, r0
    1252:	61 1d       	adc	r22, r1
    1254:	23 1f       	adc	r18, r19
    1256:	84 9f       	mul	r24, r20
    1258:	60 0d       	add	r22, r0
    125a:	21 1d       	adc	r18, r1
    125c:	82 2f       	mov	r24, r18
    125e:	76 2f       	mov	r23, r22
    1260:	6a 2f       	mov	r22, r26
    1262:	11 24       	eor	r1, r1
    1264:	9f 57       	subi	r25, 0x7F	; 127
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	9a f0       	brmi	.+38     	; 0x1290 <__mulsf3_pse+0x88>
    126a:	f1 f0       	breq	.+60     	; 0x12a8 <__mulsf3_pse+0xa0>
    126c:	88 23       	and	r24, r24
    126e:	4a f0       	brmi	.+18     	; 0x1282 <__mulsf3_pse+0x7a>
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	bb 1f       	adc	r27, r27
    1276:	66 1f       	adc	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	91 50       	subi	r25, 0x01	; 1
    127e:	50 40       	sbci	r21, 0x00	; 0
    1280:	a9 f7       	brne	.-22     	; 0x126c <__mulsf3_pse+0x64>
    1282:	9e 3f       	cpi	r25, 0xFE	; 254
    1284:	51 05       	cpc	r21, r1
    1286:	80 f0       	brcs	.+32     	; 0x12a8 <__mulsf3_pse+0xa0>
    1288:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
    128c:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	e4 f3       	brlt	.-8      	; 0x128c <__mulsf3_pse+0x84>
    1294:	98 3e       	cpi	r25, 0xE8	; 232
    1296:	d4 f3       	brlt	.-12     	; 0x128c <__mulsf3_pse+0x84>
    1298:	86 95       	lsr	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b7 95       	ror	r27
    12a0:	f7 95       	ror	r31
    12a2:	e7 95       	ror	r30
    12a4:	9f 5f       	subi	r25, 0xFF	; 255
    12a6:	c1 f7       	brne	.-16     	; 0x1298 <__mulsf3_pse+0x90>
    12a8:	fe 2b       	or	r31, r30
    12aa:	88 0f       	add	r24, r24
    12ac:	91 1d       	adc	r25, r1
    12ae:	96 95       	lsr	r25
    12b0:	87 95       	ror	r24
    12b2:	97 f9       	bld	r25, 7
    12b4:	08 95       	ret

000012b6 <_exit>:
    12b6:	f8 94       	cli

000012b8 <__stop_program>:
    12b8:	ff cf       	rjmp	.-2      	; 0x12b8 <__stop_program>
